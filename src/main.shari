infixr → : 25 := imp
infix = : 50 := eq
nofix ⊤ := top
infixl ∧ : 35 := and
nofix ⊥ := bot
infixl ∨ : 30 := or
prefix ¬ : 40 := not
infix ↔ : 20 := iff
infix ≠ : 50 := ne

type variable u v

-- Leibniz equality
def eq.{u} (x : u) (y : u) : Prop := ∀ P, P x → P y

def top : Prop := ∀ φ, φ → φ
def and (φ : Prop) (ψ : Prop) : Prop := ∀ ξ, (φ → ψ → ξ) → ξ

-- The following definitions are due to Prawitz and Russell.
def bot : Prop := ∀ ξ, ξ
def or (φ : Prop) (ψ : Prop) : Prop := ∀ ξ, (φ → ξ) → (ψ → ξ) → ξ
def exists.{u} (P : u → Prop) : Prop := ∀ ξ, (∀ x, P x → ξ) → ξ

-- Other connectives
def not (φ : Prop) : Prop := φ → ⊥
def iff (φ : Prop) (ψ : Prop) : Prop := (φ → ψ) ∧ (ψ → φ)
def uexists.{u} (P : u → Prop) : Prop := ∃ x, P x ∧ (∀ y, P y → x = y)
def ne.{u} (x : u) (y : u) : Prop := ¬x = y

-- Three axioms of topos (cf. [Introduction to CATEGORY THEORY and CATEGORICAL LOGIC, T. Streicher, '03])
axiom prop_ext (φ ψ : Prop) : (φ ↔ ψ) → φ = ψ
-- The fact that this axiom holds means every topos is always internally well-pointed.
axiom fun_ext.{u, v} (f₁ f₂ : u → v) : (∀ x, f₁ x = f₂ x) → f₁ = f₂
axiom auc.{u, v} (R : u → v → Prop) : (∀ x, ∃! y, R x y) → ∃! f, ∀ x, R x (f x)

/-
 - TODO:
 - [x] stronger type inference. (propagate constraints among exprs)
 - [x] automatic insertion of forall_elim using higher-order unification
 - [ ] field access notation (ad hoc overload)
 - [ ] coersion (especially automatic insertion of rep)
 - [ ] type class
 -/
lemma tautology : ∀ φ, φ → φ := take (φ : Prop), assume φ, ⟪φ⟫
lemma top.intro : ⊤ := tautology

lemma eq.refl.{u} (m : u) : m = m := take (P : u → Prop), tautology[_]

lemma eq.transport.{u} (m₁ m₂ : u) (P : u → Prop) : m₁ = m₂ → P m₁ → P m₂ := assume m₁ = m₂, ⟪m₁ = m₂⟫[P]
lemma eq.symm.{u} (m₁ m₂ : u) : m₁ = m₂ → m₂ = m₁ := assume m₁ = m₂, eq.transport ⟪m₁ = m₂⟫ @eq.refl[m₁]
lemma eq.trans.{u} (m₁ m₂ m₃ : u) : m₁ = m₂ → m₂ = m₃ → m₁ = m₃ := assume m₁ = m₂, assume m₂ = m₃, eq.transport ⟪m₂ = m₃⟫ ⟪m₁ = m₂⟫
lemma and.intro (φ ψ : Prop) : φ → ψ → φ ∧ ψ := assume φ, assume ψ, take (ξ : Prop), assume φ → ψ → ξ, ⟪φ → ψ → ξ⟫ ⟪φ⟫ ⟪ψ⟫

-- modus ponens
lemma mp (φ ψ : Prop) : φ → (φ → ψ) → ψ := assume φ, assume φ → ψ, ⟪φ → ψ⟫ ⟪φ⟫
lemma imp.trans (φ ψ ξ : Prop) : (φ → ψ) → (ψ → ξ) → φ → ξ := assume φ → ψ, assume ψ → ξ, assume φ, ⟪ψ → ξ⟫ (⟪φ → ψ⟫ ⟪φ⟫)
-- modus tollens
lemma mt (φ ψ : Prop) : (φ → ψ) → ¬ψ → ¬φ := imp.trans
lemma contradiction (φ : Prop) : φ → ¬φ → ⊥ := mp
lemma absurd (φ : Prop) : ⊥ → φ := assume ⊥, ⟪⊥⟫[φ]

lemma eq.conv (φ ψ : Prop) : (φ = ψ) → φ → ψ := assume φ = ψ, (@eq.transport[_, _, λ (ξ : Prop), ξ] ⟪φ = ψ⟫)
-- material adequacy
lemma ma (φ : Prop) : (⊤ = φ) → φ := assume ⊤ = φ, eq.conv ⟪⊤ = φ⟫ top.intro

lemma not.fixed_point_free (φ : Prop) : φ ≠ ¬φ :=
assume φ = ¬φ,
have ¬φ := assume φ, contradiction ⟪φ⟫ (eq.conv ⟪φ = ¬φ⟫ ⟪φ⟫),
have φ := eq.conv (eq.symm ⟪φ = ¬φ⟫) ⟪¬φ⟫,
contradiction ⟪φ⟫ ⟪¬φ⟫

/-
lemma not.fixed_point_free (φ : Prop) : φ ≠ ¬φ :=
assume φ = ¬φ,
have ¬φ := assume φ, contradiction ⟪φ⟫ (⟪φ = ¬φ⟫.conv ⟪φ⟫),
have φ := ⟪φ = ¬φ⟫.symm.conv ⟪¬φ⟫,
contradiction ⟪φ⟫ ⟪¬φ⟫

lemma not.no_fixpoint (φ : Prop) : φ ≠ ¬φ :=
assume φ = ¬φ, show ⊥, {
  let φ, ¬φ := ⟪⊥⟫.contradiction φ,
  let (¬φ) = φ, ¬φ := ⟪φ⟫.apply eq.conv[¬φ, φ],    -- yields ¬φ, which is automatically contracted with the one that comes from the contradiction tactic.
  ⟪(¬φ) = φ⟫.symmetry := ⟪φ = ¬φ⟫,
  ⟪¬φ⟫ := assume φ, show ⊥, {
     let φ, ¬φ := ⟪⊥⟫.contradiction φ,
     let φ := ⟪¬φ⟫.apply (eq.conv[φ, ¬φ] ⟪φ = ¬φ⟫),   -- φ is automatically contracted.
     ⟪φ⟫ := ⟪φ⟫
  }
}
-/

lemma exists.intro.{u} (P : u → Prop) (m : u) : P m → exists P :=
assume P m,
take (ξ : Prop),
assume ∀ x, P x → ξ,
⟪∀ x, P x → ξ⟫[m] ⟪P m⟫

lemma exists.elim.{u} (P : u → Prop) (φ : Prop) : exists P → (∀ x, P x → φ) → φ :=
assume exists P,
(change ∀ ξ, (∀ x, P x → ξ) → ξ, ⟪exists P⟫)[φ]

lemma and.elim (φ ψ ξ : Prop) : φ ∧ ψ → (φ → ψ → ξ) → ξ :=
assume φ ∧ ψ,
(change ∀ ξ, (φ → ψ → ξ) → ξ, ⟪φ ∧ ψ⟫)[ξ]

lemma and.left (φ ψ : Prop) : φ ∧ ψ → φ :=
assume φ ∧ ψ,
and.elim ⟪φ ∧ ψ⟫ (assume φ, assume ψ, ⟪φ⟫)

lemma and.right (φ ψ : Prop) : φ ∧ ψ → ψ :=
assume φ ∧ ψ,
and.elim ⟪φ ∧ ψ⟫ (assume φ, assume ψ, ⟪ψ⟫)

lemma or.left (φ ψ : Prop) : φ → φ ∨ ψ :=
assume φ,
take (ξ : Prop),
assume φ → ξ,
assume ψ → ξ,
⟪φ → ξ⟫ ⟪φ⟫

lemma or.right (φ ψ : Prop) : ψ → φ ∨ ψ :=
assume ψ,
take (ξ : Prop),
assume φ → ξ,
assume ψ → ξ,
⟪ψ → ξ⟫ ⟪ψ⟫

lemma or.elim (φ ψ ξ : Prop) : φ ∨ ψ → (φ → ξ) → (ψ → ξ) → ξ :=
assume φ ∨ ψ,
(change ∀ ξ, (φ → ξ) → (ψ → ξ) → ξ, ⟪φ ∨ ψ⟫)[ξ]

lemma not.intro (φ : Prop) : (φ → ⊥) → ¬φ :=
assume φ → ⊥,
⟪φ → ⊥⟫

lemma not.elim (φ : Prop) : ¬φ → φ → ⊥ :=
assume ¬φ,
⟪¬φ⟫

-- Internal version of nondegeneracy of topos.
-- Of course, this lemma holds in any (possibly degenerate) topos.
lemma top_ne_bot : ⊤ ≠ ⊥ :=
assume ⊤ = ⊥,
eq.conv ⟪⊤ = ⊥⟫ top.intro

lemma eq.ap.{u, v} (m₁ m₂ : u) (f : u → v) : m₁ = m₂ → f m₁ = f m₂ :=
assume m₁ = m₂,
eq.transport ⟪m₁ = m₂⟫ @eq.refl[f m₁]

lemma eq.congr_fun.{u, v} (f₁ f₂ : u → v) (x : u) : f₁ = f₂ → f₁ x = f₂ x :=
assume f₁ = f₂,
eq.transport ⟪f₁ = f₂⟫ @eq.refl[f₁ x]

lemma eq.congr_arg.{u, v} (f : u → v) (x₁ x₂ : u) : x₁ = x₂ → f x₁ = f x₂ :=
assume x₁ = x₂,
eq.transport ⟪x₁ = x₂⟫ @eq.refl[f x₁]

-- subsingleton
def unique.{u} (P : u → Prop) : Prop := ∀ (x₁ x₂ : u), P x₁ → P x₂ → x₁ = x₂

lemma uexists.intro.{u} (P : u → Prop) : exists P → unique P → uexists P :=
assume exists P,
assume unique P,
obtain (x : u), P x := ⟪exists P⟫,
exists.intro (and.intro ⟪P x⟫ (take (y : u), assume P y, (change ∀ x₁ x₂, P x₁ → P x₂ → x₁ = x₂, ⟪unique P⟫)[x, y] ⟪P x⟫ ⟪P y⟫))

lemma uexists.exists.{u} (P : u → Prop) : uexists P → exists P :=
assume uexists P,
obtain (x : u), P x ∧ ∀ (y : u), P y → x = y := ⟪uexists P⟫,
exists.intro (and.left ⟪P x ∧ ∀ y, P y → x = y⟫)

lemma uexists.unique.{u} (P : u → Prop) : uexists P → unique P :=
assume uexists P,
take (x₁ : u),
take (x₂ : u),
assume P x₁,
assume P x₂,
obtain (x : u), P x ∧ ∀ y, P y → x = y := ⟪uexists P⟫,
have ∀ y, P y → x = y := and.right ⟪P x ∧ ∀ y, P y → x = y⟫,
have x = x₁ := ⟪∀ y, P y → x = y⟫[x₁] ⟪P x₁⟫,
have x = x₂ := ⟪∀ y, P y → x = y⟫[x₂] ⟪P x₂⟫,
eq.trans (eq.symm ⟪x = x₁⟫) ⟪x = x₂⟫

lemma iff.intro (φ ψ : Prop) : (φ → ψ) → (ψ → φ) → (φ ↔ ψ) :=
assume φ → ψ,
assume ψ → φ,
and.intro ⟪φ → ψ⟫ ⟪ψ → φ⟫

lemma iff.right (φ ψ : Prop) : (φ ↔ ψ) → φ → ψ :=
assume φ ↔ ψ,
and.left ⟪φ ↔ ψ⟫

lemma iff.left (φ ψ : Prop) : (φ ↔ ψ) → ψ → φ :=
assume φ ↔ ψ,
and.right ⟪φ ↔ ψ⟫

lemma iff.trans (φ ψ ξ : Prop) : (φ ↔ ψ) → (ψ ↔ ξ) → (φ ↔ ξ) :=
assume φ ↔ ψ,
assume ψ ↔ ξ,
iff.intro
  (imp.trans (iff.right ⟪φ ↔ ψ⟫) (iff.right ⟪ψ ↔ ξ⟫))
  (imp.trans (iff.left ⟪ψ ↔ ξ⟫) (iff.left ⟪φ ↔ ψ⟫))

lemma exists.map.{u} (P Q : u → Prop) : (∀ x, P x → Q x) → (∃ x, P x) → ∃ x, Q x :=
assume ∀ x, P x → Q x,
assume ∃ x, P x,
obtain (t : u), P t := ⟪∃ x, P x⟫,
exists.intro (⟪∀ x, P x → Q x⟫[t] ⟪P t⟫)

lemma unique.map.{u} (P Q : u → Prop) : (∀ x, P x → Q x) → unique Q → unique P :=
assume ∀ x, P x → Q x,
assume unique Q,
take (x₁ : u),
take (x₂ : u),
assume P x₁,
assume P x₂,
(change ∀ x₁ x₂, Q x₁ → Q x₂ → x₁ = x₂, ⟪unique Q⟫)[x₁, x₂] (⟪∀ x, P x → Q x⟫[x₁] ⟪P x₁⟫) (⟪∀ x, P x → Q x⟫[x₂] ⟪P x₂⟫)

lemma uexists.congr.{u} (P Q : u → Prop) : (∀ x, P x ↔ Q x) → ((∃! x, P x) ↔ ∃! x, Q x) :=
assume ∀ x, P x ↔ Q x,
have ∀ x, P x → Q x := take (x : u), iff.right ⟪∀ x, P x ↔ Q x⟫[x],
have ∀ x, Q x → P x := take (x : u), iff.left ⟪∀ x, P x ↔ Q x⟫[x],
iff.intro
  (assume ∃! x, P x,
    uexists.intro
      (exists.map ⟪∀ x, P x → Q x⟫ (uexists.exists ⟪∃! x, P x⟫))
      (unique.map ⟪∀ x, Q x → P x⟫ (uexists.unique ⟪∃! x, P x⟫)))
  (assume ∃! x, Q x,
    uexists.intro
      (exists.map ⟪∀ x, Q x → P x⟫ (uexists.exists ⟪∃! x, Q x⟫))
      (unique.map ⟪∀ x, P x → Q x⟫ (uexists.unique ⟪∃! x, Q x⟫)))

/-
 - Extensionality
 -/

lemma eq.congr_abs.{u, v} (m₁ m₂ : u) : (∀ (x : v), m₁ = m₂) → (λ (x : v), m₁) = (λ (x : v), m₂) :=
assume ∀ (x : v), m₁ = m₂,
fun_ext ⟪∀ (x : v), m₁ = m₂⟫

lemma eta_expand.{u, v} (f : u → v) : f = λ x, f x :=
@fun_ext[f, λ x, f x] (take (x : u), @eq.refl[f x])

/-
 - functions
 -/

def injective.{u, v} (f : u → v) : Prop := ∀ x y, f x = f y → x = y
def surjective.{u, v} (f : u → v) : Prop := ∀ y, ∃ x, y = f x

lemma lawvere_fixpoint.{u, v} : (∃ (e : u → u → v), surjective e) → ∀ (f : v → v), ∃ y, y = f y :=
assume ∃ (e : u → u → v), surjective e,
take (f : v → v),
obtain (e : u → u → v), surjective e := ⟪∃ (e : u → u → v), surjective e⟫,
obtain (x : u), (λ x, f (e x x)) = e x := ⟪surjective e⟫[λ x, f (e x x)],
have f (e x x) = e x x := eq.congr_fun ⟪(λ x, f (e x x)) = e x⟫,
exists.intro (eq.symm ⟪f (e x x) = e x x⟫)

lemma injective.unique.{u, v} (f : u → v) : injective f → ∀ y, unique (λ x, y = f x) :=
assume injective f,
take (y : v),
take (x₁ : u),
take (x₂ : u),
assume y = f x₁,
assume y = f x₂,
(change ∀ x y, f x = f y → x = y, ⟪injective f⟫)[x₁, x₂] (eq.trans (eq.symm ⟪y = f x₁⟫) ⟪y = f x₂⟫)

/-
 - sets
 -/

infix ∈ : 50 := in
infix ∉ : 50 := notin
infix ⊆ : 50 := subset
infixl ∩ : 70 := cap
infixl ∪ : 65 := cup
infix ∖ : 70 := setminus
nofix ∅ := empty

-- type set u := u → Prop

def in.{u} (x : u) (s : set u) : Prop := s x
def notin.{u} (x : u) (s : set u) : Prop := ¬(x ∈ s)
def univ.{u} : set u := λ x, ⊤
def empty.{u} : set u := λ x, ⊥
def subset.{u} (s : set u) (t : set u) : Prop := ∀ x, x ∈ s → x ∈ t
def sep.{u} (s : set u) (φ : set u) : set u := λ x, x ∈ s ∧ φ x
def cap.{u} (s : set u) (t : set u) : set u := { x | x ∈ s ∧ x ∈ t }
def cup.{u} (s : set u) (t : set u) : set u := { x | x ∈ s ∨ x ∈ t }
def bigcap.{u} (a : set (set u)) : set u := { x | ∀ s, s ∈ a → x ∈ s }
def bigcup.{u} (a : set (set u)) : set u := { x | ∃ s, s ∈ a ∧ x ∈ s }
def power.{u} (s : set u) : set (set u) := { t | t ⊆ s }
def setminus.{u} (s : set u) (t : set u) : set u := { x | x ∈ s ∧ x ∉ t }
def im.{u, v} (f : u → v) (s : set u) : set v := { y | ∃ x, x ∈ s ∧ y = f x }

lemma cantor.{u} : ¬(∃ (e : u → set u), surjective e) :=
mt lawvere_fixpoint (
  assume ∀ (f : Prop → Prop), ∃ y, y = f y,
  obtain (y : Prop), y = ¬y := ⟪∀ (f : Prop → Prop), ∃ y, y = f y⟫[not],
  contradiction ⟪y = ¬y⟫ not.fixed_point_free)

/-
 - comprehension types
 -/

-- e.g. type def bool := { x : Prop | x = ⊤ ∨ x = ⊥ } yields comprehension.{Prop, bool}
type const comprehension : Type → Type → Type
const char.{v, u} : comprehension v u → v → Prop
const rep.{v, u} : comprehension v u → u → v
-- this alone is insufficient as this only asserts existence but does not give the concrete term.
axiom rep.spec.{v, u} (d : comprehension v u) : injective (rep d) ∧ (∀ y, char d y ↔ ∃! x, y = rep d x)

lemma rep.injective.{v, u} (d : comprehension v u) : injective (rep d) :=
and.left rep.spec

lemma rep.unique.{v, u} (d : comprehension v u) (y : v) : unique (λ x, y = rep d x) :=
(injective.unique rep.injective)[y]

lemma rep.iff_char.{v, u} (d : comprehension v u) (y : v) : char d y ↔ ∃! x, y = rep d x :=
(and.right rep.spec)[y]

lemma rep.char.{v, u} (d : comprehension v u) (y : v) : (∃! x, y = rep d x) → char d y :=
iff.left rep.iff_char

lemma char.abs.{v, u} (d : comprehension v u) (y : v) : char d y → ∃! x, y = rep d x :=
iff.right rep.iff_char

lemma char.rep.{v, u} (d : comprehension v u) (x : u) : char d (rep d x) :=
rep.char (uexists.intro (exists.intro eq.refl) rep.unique)

/-
-- How to enable to obtain the mediating arrow.

-- # Candidate 1: ``abstract'' syntax

-- transpose of (f : w → v) s.t. P ∘ f = ⊤
def mk (y : w) : { x | P x } := abstract f y, { /- proof obligation: P (f y) -/ }

def mk.{v, u, w} (d : comprehension v u) (y : w) : u := abstract f y, { /- proof obligation: P (f y) -/ }

-- automatically generated
axiom mk.spec (y : w) : rep (mk y) = f y


-- # Candidate 2: Use truncation

class singleton u extends comprehension u :=
(pt : base u)
(assume unique : ∀ (x : u), pt = rep x)

-- Hypothetical type definition:
-- 
--   type def el φ := { h : unit | φ }
--
-- Recall in dependent type theory Tarski universes have the following rules:
--
--   Γ ⊢ A type
--   ------------------------------
--   Γ ⊢ toProp : isProp(A) → Prop
--
--   Γ ⊢ p : Prop
--   -------------
--   Γ ⊢ El(p) type
--
--   Γ ⊢ p : Prop
--   --------------------------------
--   Γ ⊢ proptrunc(p) : isProp(El(p))
--
-- In our logic we have a restricted form of them:
--
--   ⊢ p : Prop
--   -------------
--   ⊢ el p type
--
--   -------------------------------------------
--   ⊢ el.prop_trunc : ∀ (h₁ h₂ : el p), h₁ = h₂
--

-- to avoid dependent types, we seemingly must implement type classes with monomorphization.
def abs.{base, u, v} [comprehension base u] [singleton base v] : el(char.{base, u} pt.{base, v}) → u

-- This also creates a term `foo.{base, u, v}` of type `el(char.{u} pt.{base, v})`
lemma foo.{base, u, v} [comprehension base u] [singleton base v] : char.{base, u} pt.{base, v} :=
...

-- setup
--
--  class singleton u extends comprehension u :=
--  (pt : base u)
--  (assume unique : ∀ (x : u), pt = rep x)
--
type const singleton : Type → Type → Type
const singleton_extends_comprehension.{base, u} : singleton base u → comprehension base u
const pt.{base, u} : singleton base u → base
axiom unique.{base, u} (d : singleton base u) : ∀ (x : u), pt.{base, u} d = rep.{base, u} (singleton_extends_comprehension.{base, u} d) x

-- introduction of singleton type.
-- notation is borrowed from 1-tuple.
--
--   type def top := ⟨⊤⟩
--
-- the followings are auto-generated.
type const top : Type
const top.singleton : singleton Prop top
def top.singleton.pt : Prop := ⊤
axiom top.singleton.spec : top.singleton.pt = pt.{Prop, top} top.singleton

lemma char_top : char.{Prop, bool} bool.comprehension (pt.{Prop, top} top.singleton) :=
sorry

-- then we have:
const char_top : el(char.{Prop, bool} bool.comprehension (pt.{Prop, top} top.singleton))
-- This is called ``propositions as codes for subsingletons'' in the literature.

def tt : bool := abs.{Prop, bool, top} char_top
-/

/-
 - bool
 -/

-- The type of decidable propositions.
-- type def bool := { φ : Prop | φ = ⊤ ∨ φ = ⊥ }
type const bool : Type
const bool.comprehension : comprehension Prop bool
def bool.char : Prop → Prop := λ φ, φ = ⊤ ∨ φ = ⊥
axiom bool.spec : bool.char = char bool.comprehension
lemma bool.char.unfold (φ : Prop) : bool.char φ → char bool.comprehension φ := assume bool.char φ, eq.conv (eq.congr_fun bool.spec) ⟪bool.char φ⟫
lemma bool.char.fold (φ : Prop) : char bool.comprehension φ → bool.char φ := assume char bool.comprehension φ, eq.conv (eq.congr_fun (eq.symm bool.spec)) ⟪char bool.comprehension φ⟫
def bool.rep : bool → Prop := rep bool.comprehension
lemma bool.char.abs (φ : Prop) : bool.char φ → ∃! x, φ = bool.rep x := assume bool.char φ, char.abs (bool.char.unfold ⟪bool.char φ⟫)
lemma bool.rep.char (φ : Prop) : (∃! x, φ = bool.rep x) → bool.char φ := assume ∃! x, φ = bool.rep x, bool.char.fold (rep.char ⟪∃! x, φ = bool.rep x⟫)
lemma bool.char.rep (x : bool) : bool.char (bool.rep x) := bool.char.fold char.rep
lemma bool.rep.injective : injective bool.rep := rep.injective

lemma bool.tt_uexists : ∃! (tt : bool), ⊤ = bool.rep tt :=
bool.char.abs (or.left eq.refl)

lemma bool.ff_uexists : ∃! (ff : bool), ⊥ = bool.rep ff :=
bool.char.abs (or.right eq.refl)

-- def (tt : bool), ⊤ = bool.rep tt := bool.tt.uexists
-- def (ff : bool), ⊥ = bool.rep ff := bool.ff.uexists
const tt : bool
axiom tt.spec : ⊤ = bool.rep tt
const ff : bool
axiom ff.spec : ⊥ = bool.rep ff

lemma bool.ind (b : bool) (P : bool → Prop) : P tt → P ff → P b :=
assume P tt,
assume P ff,
or.elim bool.char.rep
  (assume bool.rep b = ⊤,
    have bool.rep b = bool.rep tt := eq.trans ⟪bool.rep b = ⊤⟫ tt.spec,
    have b = tt := bool.rep.injective[b, tt] ⟪bool.rep b = bool.rep tt⟫,
    eq.transport (eq.symm ⟪b = tt⟫) ⟪P tt⟫)
  (assume bool.rep b = ⊥,
    have bool.rep b = bool.rep ff := eq.trans ⟪bool.rep b = ⊥⟫ ff.spec,
    have b = ff := bool.rep.injective[b, ff] ⟪bool.rep b = bool.rep ff⟫,
    eq.transport (eq.symm ⟪b = ff⟫) ⟪P ff⟫)

lemma bool.case (b : bool) : b = tt ∨ b = ff :=
bool.ind (or.left eq.refl) (or.right eq.refl)

lemma bool.tt_ne_ff : tt ≠ ff :=
assume tt = ff,
top_ne_bot (eq.trans tt.spec (eq.trans (eq.congr_arg ⟪tt = ff⟫) (eq.symm ff.spec)))

lemma bool.rec_exists.{u} (on_tt : u) (on_ff : u) (b : bool) : ∃ (rec : u), (b = tt → rec = on_tt) ∧ (b = ff → rec = on_ff) :=
or.elim bool.case
  (assume b = tt,
    exists.intro
      (and.intro
        (assume b = tt, eq.refl)
        (assume b = ff, absurd (bool.tt_ne_ff (eq.trans (eq.symm ⟪b = tt⟫) ⟪b = ff⟫)))))
  (assume b = ff,
    exists.intro
      (and.intro
        (assume b = tt, absurd (bool.tt_ne_ff (eq.trans (eq.symm ⟪b = tt⟫) ⟪b = ff⟫)))
        (assume b = ff, eq.refl)))

lemma bool.rec_unique.{u} (on_tt : u) (on_ff : u) (b : bool) : unique λ (rec : u), (b = tt → rec = on_tt) ∧ (b = ff → rec = on_ff) :=
take (r₁ : u),
take (r₂ : u),
assume (b = tt → r₁ = on_tt) ∧ (b = ff → r₁ = on_ff),
assume (b = tt → r₂ = on_tt) ∧ (b = ff → r₂ = on_ff),
or.elim bool.case
  (assume b = tt,
    have r₁ = on_tt := and.left ⟪(b = tt → r₁ = on_tt) ∧ (b = ff → r₁ = on_ff)⟫ ⟪b = tt⟫,
    have r₂ = on_tt := and.left ⟪(b = tt → r₂ = on_tt) ∧ (b = ff → r₂ = on_ff)⟫ ⟪b = tt⟫,
    eq.trans ⟪r₁ = on_tt⟫ (eq.symm ⟪r₂ = on_tt⟫))
  (assume b = ff,
    have r₁ = on_ff := and.right ⟪(b = tt → r₁ = on_tt) ∧ (b = ff → r₁ = on_ff)⟫ ⟪b = ff⟫,
    have r₂ = on_ff := and.right ⟪(b = tt → r₂ = on_tt) ∧ (b = ff → r₂ = on_ff)⟫ ⟪b = ff⟫,
    eq.trans ⟪r₁ = on_ff⟫ (eq.symm ⟪r₂ = on_ff⟫))

lemma bool.rec_uexists.{u} (on_tt : u) (on_ff : u) (b : bool) : ∃! (rec : u), (b = tt → rec = on_tt) ∧ (b = ff → rec = on_ff) :=
uexists.intro bool.rec_exists bool.rec_unique

-- def (rec.{u} (on_tt : u) (on_ff : u) (b : bool) : u), (b = tt → rec on_tt on_ff b = on_tt) ∧ (b = ff → rec on_tt on_ff b = on_ff) := bool.rec_uexists
const bool.rec.{u} : u → u → bool → u
axiom bool.rec.spec.{u} (on_tt : u) (on_ff : u) (b : bool) : (b = tt → bool.rec on_tt on_ff b = on_tt) ∧ (b = ff → bool.rec on_tt on_ff b = on_ff)

def bool.cond.{u} (b : bool) (then : u) (else : u) : u := bool.rec then else b

/-
 - unit
 -/

-- type def unit := { φ : Prop | ⊤ = φ }
-- We do not use { φ | φ } in the definition because prop_ext is necessary for unit to have only one element.
type const unit : Type
const unit.comprehension : comprehension Prop unit
def unit.char : Prop → Prop := λ φ, ⊤ = φ
axiom unit.spec : unit.char = char unit.comprehension
lemma unit.char.unfold (φ : Prop) : unit.char φ → char unit.comprehension φ := assume unit.char φ, eq.conv (eq.congr_fun unit.spec) ⟪unit.char φ⟫
lemma unit.char.fold (φ : Prop) : char unit.comprehension φ → unit.char φ := assume char unit.comprehension φ, eq.conv (eq.congr_fun (eq.symm unit.spec)) ⟪char unit.comprehension φ⟫
def unit.rep : unit → Prop := rep unit.comprehension
lemma unit.char.abs (φ : Prop) : unit.char φ → ∃! x, φ = unit.rep x := assume unit.char φ, char.abs (unit.char.unfold ⟪unit.char φ⟫)
lemma unit.rep.char (φ : Prop) : (∃! x, φ = unit.rep x) → unit.char φ := assume ∃! x, φ = unit.rep x, unit.char.fold (rep.char ⟪∃! x, φ = unit.rep x⟫)
lemma unit.char.rep (x : unit) : unit.char (unit.rep x) := unit.char.fold char.rep
lemma unit.rep.injective : injective unit.rep := rep.injective

lemma unit.star_uexists : ∃! (star : unit), ⊤ = unit.rep star :=
unit.char.abs eq.refl

-- def (star : unit), ⊤ = unit.rep star := unit.star_uexists
const star : unit
axiom star.spec : ⊤ = unit.rep star

lemma unit.unique (x y : unit) : x = y :=
have unit.rep x = unit.rep y := eq.trans (eq.symm unit.char.rep) unit.char.rep,
unit.rep.injective[x, y] ⟪unit.rep x = unit.rep y⟫

lemma unit.eta_expand (x : unit) : x = star :=
unit.unique

lemma unit.eta_reduce (x : unit) : star = x :=
unit.unique

lemma unit.ind (x : unit) (P : unit → Prop) : P star → P x :=
assume P star,
eq.transport unit.eta_reduce ⟪P star⟫

/-
 - pair
 -/

-- type def pair u v := { e : u → v → Prop | ∃ a b, e a b ∧ ∀ a₁ b₁, e a₁ b₁ → a = a₁ ∧ b = b₁ }
type const pair : Type → Type → Type
const pair.comprehension.{u, v} : comprehension (u → v → Prop) (pair u v)
def pair.char.{u, v} (e : u → v → Prop) : Prop := ∃ a b, e a b ∧ ∀ a₁ b₁, e a₁ b₁ → a = a₁ ∧ b = b₁
axiom pair.spec.{u, v} : pair.char.{u, v} = char pair.comprehension.{u, v}

lemma pair.char.unfold.{u, v} (e : u → v → Prop) : pair.char e → char pair.comprehension e :=
  assume pair.char e,
    eq.conv (eq.congr_fun pair.spec) ⟪pair.char e⟫

lemma pair.char.fold.{u, v} (e : u → v → Prop) : char pair.comprehension e → pair.char e :=
  assume char pair.comprehension e,
    eq.conv (eq.congr_fun (eq.symm pair.spec)) ⟪char pair.comprehension e⟫

def pair.rep.{u, v} : pair u v → u → v → Prop := rep pair.comprehension

lemma pair.char.abs.{u, v} (e : u → v → Prop) : pair.char e → ∃! p, e = pair.rep p :=
  assume pair.char e,
    char.abs (pair.char.unfold ⟪pair.char e⟫)

lemma pair.rep.char.{u, v} (e : u → v → Prop) : (∃! p, e = pair.rep p) → pair.char e :=
  assume ∃! p, e = pair.rep p,
    pair.char.fold (rep.char ⟪∃! p, e = pair.rep p⟫)

lemma pair.char.rep.{u, v} (p : pair u v) : pair.char (pair.rep p) :=
  pair.char.fold char.rep

lemma pair.rep.injective.{u, v} : injective pair.rep.{u, v} :=
  rep.injective

lemma fst_uexists.{u, v} (p : pair u v) : ∃! a, ∃! b, pair.rep p a b :=
  obtain (a : u), ∃ b, pair.rep p a b ∧ ∀ a₁ b₁, pair.rep p a₁ b₁ → a = a₁ ∧ b = b₁ := pair.char.rep,
  obtain (b : v), pair.rep p a b ∧ ∀ a₁ b₁, pair.rep p a₁ b₁ → a = a₁ ∧ b = b₁ := ⟪∃ b, pair.rep p a b ∧ ∀ a₁ b₁, pair.rep p a₁ b₁ → a = a₁ ∧ b = b₁⟫,
  have pair.rep p a b :=
    and.left ⟪pair.rep p a b ∧ ∀ a₁ b₁, pair.rep p a₁ b₁ → a = a₁ ∧ b = b₁⟫,
  have ∀ a₁ b₁, pair.rep p a₁ b₁ → a = a₁ ∧ b = b₁ :=
    and.right ⟪pair.rep p a b ∧ ∀ a₁ b₁, pair.rep p a₁ b₁ → a = a₁ ∧ b = b₁⟫,
  uexists.intro
    (exists.intro
      (uexists.intro
        (exists.intro ⟪pair.rep p a b⟫)
        (take (b₁ : v),
         take (b₂ : v),
         assume pair.rep p a b₁,
         assume pair.rep p a b₂,
         have b = b₁ := and.right (⟪∀ a₁ b₁, pair.rep p a₁ b₁ → a = a₁ ∧ b = b₁⟫[a, b₁] ⟪pair.rep p a b₁⟫),
         have b = b₂ := and.right (⟪∀ a₁ b₁, pair.rep p a₁ b₁ → a = a₁ ∧ b = b₁⟫[a, b₂] ⟪pair.rep p a b₂⟫),
         eq.trans (eq.symm ⟪b = b₁⟫) ⟪b = b₂⟫)))
    (take (a₁ : u),
     take (a₂ : u),
     assume ∃! b, pair.rep p a₁ b,
     assume ∃! b, pair.rep p a₂ b,
     obtain (b₁ : v), pair.rep p a₁ b₁ := uexists.exists ⟪∃! b, pair.rep p a₁ b⟫,
     obtain (b₂ : v), pair.rep p a₂ b₂ := uexists.exists ⟪∃! b, pair.rep p a₂ b⟫,
     have a = a₁ := and.left (⟪∀ a₁ b₁, pair.rep p a₁ b₁ → a = a₁ ∧ b = b₁⟫[a₁, b₁] ⟪pair.rep p a₁ b₁⟫),
     have a = a₂ := and.left (⟪∀ a₁ b₁, pair.rep p a₁ b₁ → a = a₁ ∧ b = b₁⟫[a₂, b₂] ⟪pair.rep p a₂ b₂⟫),
     eq.trans (eq.symm ⟪a = a₁⟫) ⟪a = a₂⟫)

-- def (fst.{u, v} (p : pair u v) : u), ∃! b, pair.rep p (fst p) b := fst_uexists.{u, v}[p]
const fst.{u, v} : pair u v → u
axiom fst.spec.{u, v} (p : pair u v) : ∃! b, pair.rep p (fst p) b

-- def (snd.{u, v} (p : pair u v) : v), pair.rep p (fst p) (snd p) := fst.spec.{u, v}[p]
const snd.{u, v} : pair u v → v
axiom snd.spec.{u, v} (p : pair u v) : pair.rep p (fst p) (snd p)

lemma pair.proj.spec.{u, v} (p : pair u v) : pair.rep p (fst p) (snd p) := snd.spec

def pair.mk_rep.{u, v} (x : u) (y : v) : u → v → Prop := λ a b, x = a ∧ y = b

lemma pair.mk_rep.char.{u, v} (x : u) (y : v) : pair.char (pair.mk_rep x y) :=
  exists.intro
  (exists.intro
    (and.intro
      (and.intro eq.refl eq.refl)
      (take (x₁ : u),
      take (y₁ : v),
      assume pair.mk_rep x y x₁ y₁,
      ⟪pair.mk_rep x y x₁ y₁⟫)))

lemma pair.mk_uexists.{u, v} (x : u) (y : v) : ∃! p, pair.mk_rep x y = pair.rep p :=
  pair.char.abs pair.mk_rep.char

-- def (pair.mk.{u, v} (x : u) (y : v) : pair u v), pair.mk_rep x y = pair.rep (pair.mk x y) := pair.mk_uexists.{u, v}[x, y]
const pair.mk.{u, v} : u → v → pair u v
axiom pair.mk.spec.{u, v} (x : u) (y : v) : pair.mk_rep x y = pair.rep (pair.mk x y)

lemma pair.beta.{u, v} (x : u) (y : v) : x = fst (pair.mk x y) ∧ y = snd (pair.mk x y) :=
  have pair.rep (pair.mk x y) (fst (pair.mk x y)) (snd (pair.mk x y)) := pair.proj.spec,
  eq.conv
    (eq.congr_fun
      (eq.congr_fun
        (eq.symm
          pair.mk.spec)))
    ⟪pair.rep (pair.mk x y) (fst (pair.mk x y)) (snd (pair.mk x y))⟫

lemma pair.proj.unique.{u, v} (p : pair u v) (x₁ x₂ : u) (y₁ y₂ : v) : pair.rep p x₁ y₁ → pair.rep p x₂ y₂ → x₁ = x₂ ∧ y₁ = y₂ :=
assume pair.rep p x₁ y₁,
assume pair.rep p x₂ y₂,
have ∃ a b, pair.rep p a b ∧ ∀ a₁ b₁, pair.rep p a₁ b₁ → a = a₁ ∧ b = b₁ := pair.char.rep,
obtain (a : u), ∃ b, pair.rep p a b ∧ ∀ a₁ b₁, pair.rep p a₁ b₁ → a = a₁ ∧ b = b₁ := ⟪∃ a b, pair.rep p a b ∧ ∀ a₁ b₁, pair.rep p a₁ b₁ → a = a₁ ∧ b = b₁⟫,
obtain (b : v), pair.rep p a b ∧ ∀ a₁ b₁, pair.rep p a₁ b₁ → a = a₁ ∧ b = b₁ := ⟪∃ b, pair.rep p a b ∧ ∀ a₁ b₁, pair.rep p a₁ b₁ → a = a₁ ∧ b = b₁⟫,
have ∀ a₁ b₁, pair.rep p a₁ b₁ → a = a₁ ∧ b = b₁ := and.right ⟪pair.rep p a b ∧ ∀ a₁ b₁, pair.rep p a₁ b₁ → a = a₁ ∧ b = b₁⟫,
have a = x₁ ∧ b = y₁ := ⟪∀ a₁ b₁, pair.rep p a₁ b₁ → a = a₁ ∧ b = b₁⟫[x₁, y₁] ⟪pair.rep p x₁ y₁⟫,
have a = x₂ ∧ b = y₂ := ⟪∀ a₁ b₁, pair.rep p a₁ b₁ → a = a₁ ∧ b = b₁⟫[x₂, y₂] ⟪pair.rep p x₂ y₂⟫,
and.intro
  (eq.trans (eq.symm (and.left ⟪a = x₁ ∧ b = y₁⟫)) (and.left ⟪a = x₂ ∧ b = y₂⟫))
  (eq.trans (eq.symm (and.right ⟪a = x₁ ∧ b = y₁⟫)) (and.right ⟪a = x₂ ∧ b = y₂⟫))

lemma pair.eta.help₁.{u, v} (p : pair u v) (x : u) (y : v) : pair.rep p x y ↔ x = fst p ∧ y = snd p :=
iff.intro
  (assume pair.rep p x y,
   pair.proj.unique ⟪pair.rep p x y⟫ pair.proj.spec)
  (assume x = fst p ∧ y = snd p,
   have x = fst p := and.left ⟪x = fst p ∧ y = snd p⟫,
   have y = snd p := and.right ⟪x = fst p ∧ y = snd p⟫,
   eq.conv (eq.trans (@eq.congr_fun[_, _, snd p] (@eq.congr_arg[pair.rep p, _, _] (eq.symm ⟪x = fst p⟫))) (@eq.congr_arg[pair.rep p x, _, _] (eq.symm ⟪y = snd p⟫))) pair.proj.spec)

lemma pair.eta.help₂.{u, v} (p : pair u v) (x : u) (y : v) : (x = fst p ∧ y = snd p) ↔ pair.rep (pair.mk (fst p) (snd p)) x y :=
have (fst p = x ∧ snd p = y) = pair.rep (pair.mk (fst p) (snd p)) x y :=
  eq.congr_fun (eq.congr_fun pair.mk.spec),
iff.intro
  (assume x = fst p ∧ y = snd p,
   have fst p = x := eq.symm (and.left ⟪x = fst p ∧ y = snd p⟫),
   have snd p = y := eq.symm (and.right ⟪x = fst p ∧ y = snd p⟫),
   eq.conv ⟪(fst p = x ∧ snd p = y) = pair.rep (pair.mk (fst p) (snd p)) x y⟫ (and.intro ⟪fst p = x⟫ ⟪snd p = y⟫))
  (assume pair.rep (pair.mk (fst p) (snd p)) x y,
   have fst p = x ∧ snd p = y := eq.conv (eq.symm ⟪(fst p = x ∧ snd p = y) = pair.rep (pair.mk (fst p) (snd p)) x y⟫) ⟪pair.rep (pair.mk (fst p) (snd p)) x y⟫,
   have x = fst p := eq.symm (and.left ⟪fst p = x ∧ snd p = y⟫),
   have y = snd p := eq.symm (and.right ⟪fst p = x ∧ snd p = y⟫),
   and.intro ⟪x = fst p⟫ ⟪y = snd p⟫)

lemma pair.eta.{u, v} (p : pair u v) : p = pair.mk (fst p) (snd p) :=
pair.rep.injective[_, _]
  (fun_ext
    (take (x : u),
      fun_ext
        (take (y : v), prop_ext (iff.trans pair.eta.help₁ pair.eta.help₂))))

/-
 - support
 -/

-- A type operator sending an inhabited type to its propositional truncation.
-- Support type is also known as bracket type and propositional truncation.
--
-- type support u := { x : unit | ∃ (a : u), ⊤ }
type const support : Type → Type
const support.comprehension.{u} : comprehension unit (support u)
def support.char.{u} : unit → Prop := λ x, ∃ (a : u), ⊤
axiom support.spec.{u} : support.char.{u} = char support.comprehension.{u}
lemma support.char.unfold.{u} (x : unit) : support.char.{u} x → char support.comprehension.{u} x := assume support.char x, eq.conv (eq.congr_fun support.spec) ⟪support.char x⟫
lemma support.char.fold.{u} (x : unit) : char support.comprehension.{u} x → support.char.{u} x := assume char support.comprehension x, eq.conv (eq.congr_fun (eq.symm support.spec)) ⟪char support.comprehension x⟫
def support.rep.{u} : support u → unit := rep support.comprehension
lemma support.char.abs.{u} (x : unit) : support.char.{u} x → ∃! h, x = support.rep.{u} h := assume support.char x, char.abs (support.char.unfold ⟪support.char x⟫)
lemma support.rep.char.{u} (x : unit) : (∃! h, x = support.rep.{u} h) → support.char.{u} x := assume ∃! h, x = support.rep h, support.char.fold (rep.char ⟪∃! h, x = support.rep h⟫)
lemma support.char.rep.{u} (h : support u) : support.char.{u} (support.rep h) := support.char.fold char.rep
lemma support.rep.injective.{u} : injective support.rep.{u} := rep.injective

lemma support.char.unfold_.{u} : support.char.{u} star → char support.comprehension.{u} star := assume support.char star, eq.conv (eq.congr_fun support.spec) ⟪support.char star⟫
lemma support.char.fold_.{u} : char support.comprehension.{u} star → support.char.{u} star := assume char support.comprehension star, eq.conv (eq.congr_fun (eq.symm support.spec)) ⟪char support.comprehension star⟫
lemma support.char.help.{u} : (∃! (h : support u), ⊤) ↔ (∃! (h : support u), star = support.rep h) :=
@uexists.congr[λ (h : support u), ⊤, _]
  (take (h : support u),
    iff.intro
      (assume ⊤,
        unit.eta_reduce)
      (assume star = support.rep h,
        top.intro))
lemma support.char.abs_.{u} : support.char.{u} star → ∃! (h : support u), ⊤ := assume support.char star, iff.left support.char.help (support.char.abs ⟪support.char star⟫)
lemma support.rep.char_.{u} : (∃! (h : support u), ⊤) → support.char.{u} star :=
assume ∃! (h : support u), ⊤,
have ∃! (h : support u), star = support.rep h :=
  iff.right support.char.help ⟪∃! (h : support u), ⊤⟫,
support.rep.char ⟪∃! (h : support u), star = support.rep h⟫

lemma support.char.rep_.{u} (h : support u) : support.char.{u} star := @support.char.rep[h]

lemma support.mk_uexists.{u} (x : u) : ∃! (mk : support u), ⊤ :=
have ∃ (x : u), ⊤ :=
  @exists.intro[λ (x : u), ⊤, x] top.intro,
support.char.abs_ ⟪∃ (x : u), ⊤⟫

-- def (support.mk.{u} (x : u) : support u), ⊤ := support.mk_uexists.{u}[x]
const support.mk.{u} : u → support u

lemma support.unique.{u} (h₁ h₂ : support u) : h₁ = h₂ :=
(change ∀ h₁ h₂, support.rep h₁ = support.rep h₂ → h₁ = h₂, support.rep.injective)[h₁, h₂] unit.unique

lemma support.exists_imp_uexists.{u} (P : support u → Prop) : (∃ h, P h) → ∃! h, P h :=
assume ∃ h, P h,
uexists.intro
  ⟪∃ h, P h⟫
  (take (h₁ : support u), take (h₂ : support u), assume P h₁, assume P h₂, support.unique)

lemma support.join_uexists.{u} (h : support (support u)) : ∃! (h : support u), ⊤ :=
@support.exists_imp_uexists[λ (h : support u), ⊤] @support.char.rep_[h]

-- def (support.join.{u} (h : support (support u)) : support u), ⊤ := support.join_uexists.{u}[h]
const support.join.{u} : support (support u) → support u

-- internal global choice operator
-- 
-- Introducing this constant restricts the class of models to toposes whose supports split.
-- Note we do not have an object-level function assigning for each type u the choice function,
-- which would imply axiom of choice.
-- In the presence of dependent products, this operator corresponds to the law of double negation:
--
--   support u ≅ Π (p : Prop), (u → El(p)) → El(p)
--
-- where we assume Prop is a Tarski universe.
--
-- One can interpret this function in Kripke-Joyal semantics as follows:
-- whenever one proves ⊢ ∃ (x : u), ⊤, hence ⊩ ∃ (x : u), ⊤, which in general
-- means there exist an object V, V → 1 epi and V → u, one can safely assume V was 1.
const epsilon.{u} : support u → u

/-
 - choice
 -/

-- type inhabited_subset u := { s : u → Prop | ∃ x, x ∈ s }
type const inhabited_subset : Type → Type
const inhabited_subset.comprehension.{u} : comprehension (u → Prop) (inhabited_subset u)
def inhabited_subset.char.{u} : (u → Prop) → Prop := λ s, ∃ x, x ∈ s
axiom inhabited_subset.spec.{u} : inhabited_subset.char.{u} = char inhabited_subset.comprehension.{u}
lemma inhabited_subset.char.unfold.{u} (s : u → Prop) : inhabited_subset.char s → char inhabited_subset.comprehension s := assume inhabited_subset.char s, eq.conv (eq.congr_fun inhabited_subset.spec) ⟪inhabited_subset.char s⟫
lemma inhabited_subset.char.fold.{u} (s : u → Prop) : char inhabited_subset.comprehension s → inhabited_subset.char s := assume char inhabited_subset.comprehension s, eq.conv (eq.congr_fun (eq.symm inhabited_subset.spec)) ⟪char inhabited_subset.comprehension s⟫
def inhabited_subset.rep.{u} : inhabited_subset u → u → Prop := rep inhabited_subset.comprehension.{u}
lemma inhabited_subset.char.abs.{u} (s : u → Prop) : inhabited_subset.char s → ∃! h, s = inhabited_subset.rep h := assume inhabited_subset.char s, char.abs (inhabited_subset.char.unfold ⟪inhabited_subset.char s⟫)
lemma inhabited_subset.rep.char.{u} (s : u → Prop) : (∃! h, s = inhabited_subset.rep h) → inhabited_subset.char s := assume ∃! h, s = inhabited_subset.rep h, inhabited_subset.char.fold (rep.char ⟪∃! h, s = inhabited_subset.rep h⟫)
lemma inhabited_subset.char.rep.{u} (h : inhabited_subset u) : inhabited_subset.char (inhabited_subset.rep h) := inhabited_subset.char.fold char.rep
lemma inhabited_subset.rep.injective.{u} : injective inhabited_subset.rep.{u} := rep.injective

-- The exisistence of the constant and the axiom state that every type u is a choice type.
const choice.{u} : inhabited_subset u → u
axiom choice.spec.{u} (x : inhabited_subset u) : choice x ∈ inhabited_subset.rep x

lemma ac.{u, v} (R : u → v → Prop) : (∀ x, ∃ y, R x y) → ∃ (f : u → v), ∀ x, R x (f x) :=
assume ∀ x, ∃ y, R x y,
have ∀ x, ∃! (h : inhabited_subset v), R x = inhabited_subset.rep h :=
  take (x : u),
  @inhabited_subset.char.abs[R x] ⟪∀ x, ∃ y, R x y⟫[x],
have ∃! (f : u → inhabited_subset v), ∀ x, R x = inhabited_subset.rep (f x) :=
  auc ⟪∀ x, ∃! (h : inhabited_subset v), R x = inhabited_subset.rep h⟫,
obtain (f : u → inhabited_subset v), ∀ x, R x = inhabited_subset.rep (f x) :=
  uexists.exists ⟪∃! (f : u → inhabited_subset v), ∀ x, R x = inhabited_subset.rep (f x)⟫,
exists.intro
  (take (x : u),
   have inhabited_subset.rep (f x) (choice (f x)) :=
     choice.spec,
   eq.conv (eq.symm (eq.congr_fun ⟪∀ x, R x = inhabited_subset.rep (f x)⟫[x])) ⟪inhabited_subset.rep (f x) (choice (f x))⟫)

def split.{u, v} (f : u → v) : Prop := ∃ g, ∀ y, y = f (g y)

lemma surjective.split.{u, v} (f : u → v) : surjective f → split f :=
ac

-- Diaconescu's argument: ac + prop_ext + fun_ext → em
--
-- The bool type having a choice function is in fact equivalent to em.
-- While em implies (using prop_ext) Prop is _internally two-valued_ i.e.
-- ∀ φ, φ = ⊤ ∨ φ = ⊥, the ambient topos may not be (externally) two-valued;
-- it only implies the topos is boolean.
lemma em (φ : Prop) : φ ∨ ¬φ :=
have ∃ b, φ ∨ b = tt := exists.intro (or.right eq.refl),
have ∃ b, φ ∨ b = ff := exists.intro (or.right eq.refl),
obtain (h₁ : inhabited_subset bool), (λ b, φ ∨ b = tt) = inhabited_subset.rep h₁ :=
  uexists.exists
    (inhabited_subset.char.abs ⟪∃ b, φ ∨ b = tt⟫),
obtain (h₂ : inhabited_subset bool), (λ b, φ ∨ b = ff) = inhabited_subset.rep h₂ :=
  uexists.exists
    (inhabited_subset.char.abs ⟪∃ b, φ ∨ b = ff⟫),
have φ → choice h₁ = choice h₂ :=
  assume φ,
  have (λ b, φ ∨ b = tt) = (λ b, φ ∨ b = ff) := fun_ext (
    take (b : bool),
    have φ ∨ b = tt := or.left ⟪φ⟫,
    have φ ∨ b = ff := or.left ⟪φ⟫,
    prop_ext (iff.intro (assume φ ∨ b = tt, ⟪φ ∨ b = ff⟫) (assume φ ∨ b = ff, ⟪φ ∨ b = tt⟫))
  ),
  have inhabited_subset.rep h₁ = inhabited_subset.rep h₂ :=
    eq.trans (eq.symm ⟪(λ b, φ ∨ b = tt) = inhabited_subset.rep h₁⟫) (eq.trans ⟪(λ b, φ ∨ b = tt) = (λ b, φ ∨ b = ff)⟫ ⟪(λ b, φ ∨ b = ff) = inhabited_subset.rep h₂⟫),
  have h₁ = h₂ :=
    inhabited_subset.rep.injective[_, _] ⟪inhabited_subset.rep h₁ = inhabited_subset.rep h₂⟫,
  eq.congr_arg ⟪h₁ = h₂⟫,
have φ ∨ choice h₁ = tt :=
  eq.conv (eq.symm (eq.congr_fun ⟪(λ b, φ ∨ b = tt) = inhabited_subset.rep h₁⟫)) choice.spec,
have φ ∨ choice h₂ = ff :=
  eq.conv (eq.symm (eq.congr_fun ⟪(λ b, φ ∨ b = ff) = inhabited_subset.rep h₂⟫)) choice.spec,
have φ ∨ choice h₁ ≠ choice h₂ :=
  or.elim ⟪φ ∨ choice h₁ = tt⟫
    (assume φ, or.left ⟪φ⟫)
    (assume choice h₁ = tt,
      or.elim ⟪φ ∨ choice h₂ = ff⟫
        (assume φ, or.left ⟪φ⟫)
        (assume choice h₂ = ff,
          or.right (eq.transport (eq.symm ⟪choice h₂ = ff⟫) (eq.transport (eq.symm ⟪choice h₁ = tt⟫) bool.tt_ne_ff)))),
or.elim ⟪φ ∨ choice h₁ ≠ choice h₂⟫
  (assume φ,
    or.left ⟪φ⟫)
  (assume choice h₁ ≠ choice h₂,
    or.right (mt ⟪φ → choice h₁ = choice h₂⟫ ⟪choice h₁ ≠ choice h₂⟫))

/-
 - natural numbers
 -/

type const ℕ : Type
const zero : ℕ
const succ : ℕ → ℕ
axiom ind : ∀ n, ∀ P, P zero ∧ (∀ n, P n → P (succ n)) → P n
const rec.{u} : ℕ → u → (u → u) → u
axiom rec.spec.{u} : ∀ (d₁ : u) (d₂ : u → u), rec zero d₁ d₂ = d₁ ∧ (∀ n, rec (succ n) d₁ d₂ = d₂ (rec n d₁ d₂))

infixl + : 65 := add
infixl - : 65 := sub
infixl * : 70 := mul
infixl / : 70 := div
prefix - : 100 := neg
infixr ^ : 80 := pow
infix ≤ : 50 := le
infix < : 50 := lt
infix ≥ : 50 := ge
infix > : 50 := gt

def add (n m : ℕ) : ℕ := rec n m succ
def mul (n m : ℕ) : ℕ := rec n zero (add m)

def bit0 (n : ℕ) : ℕ := n + n
def bit1 (n : ℕ) : ℕ := succ (bit0 n)

------------------------------------------------------------

/-
type def proof := { φ : Prop | φ }
def proof.target : proof → Prop := proof.rep

-- hypothetical lemma (using type dependency)
type def proof (φ : Prop) := { h : unit | φ }
lemma to_proof (φ : Prop) : φ → ∃! (h : proof φ), ⊤
lemma from_proof (φ : Prop) (h : proof φ) : φ

class comprehension u :=
  (type base : Type)
  (char : base → Prop)

namespace comprehension {
  const rep.{u} [comprehension u] : u → base u
  axiom rep.spec.{u} [comprehension u] : injective rep ∧ (∀ y, (∃! x, y = rep x) ↔ char y)
}
-/
