constant imp : Prop → Prop → Prop
constant forall : (α → Prop) → Prop

infixr → : 25 := imp
-- notation ∀ x, p := forall (λ x, p)

def top : Prop := ∀ p, p → p

nofix ⊤ := top

def and (p₁ p₂ : Prop) : Prop := ∀ r, (p₁ → p₂ → r) → r

infixr ∧ : 35 := and

def bot : Prop := ∀ r, r

nofix ⊥ := bot

def or (p₁ p₂ : Prop) : Prop := ∀ r, (p₁ → r) ∧ (p₂ → r) → r

infixr ∨ : 30 := or

def exists (P : α → Prop) : Prop := ∀ r, (∀ x, P x → r) → r

-- notation ∃ x, p := exists (λ x, p)

-- (∀ x, f x = g x) → f = g
-- (∀ x, ∀ P, P (f x) → P (g x)) → (∀ P, P f → P g)

def not (p : Prop) : Prop := ∀ r, p → r

prefix ¬ : 40 := not

def iff (p₁ p₂ : Prop) : Prop := (p → q) ∧ (q → p)

infix ↔ : 20 := iff

-- Leibniz equality (indiscernibility of identicals)
def eq (t₁ t₂ : α) : Prop := ∀ P, P t₁ → P t₂

infix = : 50 := eq
