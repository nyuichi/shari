/-
 - TODO:
 - [x] stronger type inference. (propagate constraints among exprs)
 - [x] automatic insertion of forall_elim using higher-order unification
 - [x] inductive types
 - [x] inductive predicates
 - [x] structures and instances
 - [x] type class
 - [x] calc environment
 - [ ] improved error reporting
 - [ ] coercion
 - [ ] namespace
 -/

/-

** FOR PLAYGROUND USERS **

You can type unicode characters with typing `\` + command names. Commands mostly follow the naming conventions of LaTeX.
See the comprehensive list of input commands [here](./unicode-map.js).


# Syntax

Proof expressions include the following:

take (x : τ), e               forall introduction
e[m₁, ⋯, mₙ]                  forall elimination (Note that invocation of a proved or postulated fact implicitly inserts forall eliminations.)
assume φ, e                   imp introduction
e₁ e₁                         imp elimination
change φ, e                   change the goal to a definitional equivalent
have φ := e₁, e₂
obtain (x : τ), φ := e₁, e₂
calc m₁ = m₂ := e₁ ... = m₃ := e₂ ... = m₄ := e₃, e₄


# The logical foundation

Some axioms / constants are postulated upon the base logic.
Their consistency is established from semantic arguments.

| logic                                              | models                                |
|----------------------------------------------------|---------------------------------------|
| intuitionistic higher-order logic (the base logic) | any model of PTS λHOL                 |
| + fun_ext + prop_ext + auc                         | any topos                             |
|   + choice                                         |   satisfying internal axiom of choice |
|   + epsilon                                        |   in which supports split             |
|   + inductive types                                |   with NNO                            |

The base logic is described by the following pure type system (PTS):

| S | Prop, Type, Kind |
| A | Prop : Type, Type : Kind |
| R | (Prop, Prop), (Type, Type), (Type, Prop) |

`φ ψ ⋯ : Prop` are called _propositions_.
`e₁ e₂ ⋯ : φ` are called _(proof) expressions_.

-/

-- the very basic building blocks of our logic
type const Prop : Type
const imp : Prop → Prop → Prop
-- the universe Prop of all propositions is impredicative.
const forall.{u} : (u → Prop) → Prop

infixr → : 25 := imp
infix = : 50 := eq
nofix ⊤ := has_top.top
infixl ∧ : 35 := has_wedge.wedge
nofix ⊥ := has_bot.bot
infixl ∨ : 30 := has_vee.vee
prefix ¬ : 40 := has_neg.neg
infix ↔ : 20 := iff
infix ≠ : 50 := ne

infixl + : 65 := has_plus.plus
infixl - : 65 := sub
infixl * : 70 := has_ast.ast
infixl / : 70 := div
prefix - : 100 := neg
infixr ^ : 80 := pow
infix ≤ : 50 := has_le.le
infix < : 50 := has_le.lt
infix ≥ : 50 := has_le.ge
infix > : 50 := has_le.gt

-- The kernel and higher-order unifier recognize three reduction rules as the definitional equivalence:
--
-- 1. β-reduction: (λ x, M) N ↦ [N/x]M
-- 2. δ-reduction: c ↦ M  where there is a definition somewhere `def c := M`.
-- 3. κ-reduction: c ↦ N  where c is a method from a class `C u₁ ⋯ uₙ` and c is assigned types so that
--                              it is resolved to some concrete instance.
--
-- Rules 1 and 2 are type agnostic. Also, rule 3 can be applied to partially typed terms as long as its method
-- can be resolved to a concrete term.
--
-- There are basically two approaches to incorporate type classes into a language.
--
-- a) Add support for implicit arguments and build type classes on it.
-- b) Add them natively.
--
-- (a) is taken by most languages supporting dependent types including Coq, Agda, Lean, and Scala.
-- Others such as Haskell and Isabelle use (b). Our choice is (b), because we do not have dependency thus
-- implicit arguments are not necessary in typing, and using (b) makes it easier to force the coherency of instances.
-- (While languages using (a) allows overlapping instances and non-deterministic elaboration, coherency is still
-- important to avoid unintentional behaviours. In fact, in Lean, programmers must be careful not to introduce
-- _morally incoherent_ instances.)
--
-- Because our kernel (nor the unifier) do not implement ι-reduction, we implement class method instantiation by a special
-- equality rule called κ-reduction. When the elaborator encounters κ-redex it eagerly reduces. So we recommend users to
-- use as small terms in instance method definitions as possible so that terms may not exponentially blow up.
--
-- While use of class instantiations are not lowered to terms representing structure objects, the kernel implicitly generates
-- instance objects that are invisible in the language surface. This design allows us to easily prove the consistency of the logic,
-- otherwise it is very error-prone [KP19].
--
-- - [KP19] Kunˇcar, and Popescu,  A Consistent Foundation for Isabelle/HOL, 2019

-- This introduces:
-- 
-- 1. A class predicate `has_top` with one variable. Class predicates have a separate namespace.
-- 2. A constant with a class constraint: `const top.{u} [has_top u] : u`.
--    If there is an instance `I` of class `has_top τ`, top.{τ} is κ-reducible to I.top.
--
class structure has_top u := {
  const top : u
}

class structure has_bot u := {
  const bot : u
}

class structure has_wedge u := {
  const wedge : u → u → u
}

class structure has_vee u := {
  const vee : u → u → u
}

class structure has_neg u := {
  const neg : u → u
}

class structure has_plus u := {
  const plus : u → u → u
}

class structure has_ast u := {
  const ast : u → u → u
}

class structure has_le u := {
  const le : u → u → Prop
}

-- The most generic class.
-- One can use only this class to emulate every class structure.
class structure has u := {
  const summon : u
}

def summon.{u} [has u] : u := has.summon

-- A predicative version of Leibniz equality (attributed to Paulin).
-- The following set of declarations are generated.
-- (Notice that the order of arguments in eq.ind is slightly modified from [Dybjer, '97].)
--
--   const eq.{u} : u → u → Prop
--   axiom eq.refl.{u} (x : u) : x = x
--   axiom eq.ind.{u} (x : u) (y : u) (P : u → Prop) : x = y → P x → P y
--
-- This definition might look magical at first glance but is preferred to the ordinary definition by
-- least reflexive relation à la Martin-Löf because this induces a much simpler elimination rule.
--
-- The existence of inductive (predicate) families follows from the fact that every topos
-- validates the Knaster-Tarski fixedpoint theorem. [_citation needed_]
inductive eq.{u} (x : u) : u → Prop
| refl : eq x

inductive true : Prop
| intro : true

inductive false : Prop

inductive and (φ ψ : Prop) : Prop
| intro : φ → ψ → and

inductive or (φ ψ : Prop) : Prop
| left : φ → or
| right : ψ → or

inductive exists.{u} (P : u → Prop) : Prop
| intro (t : u) : P t → exists

class instance Prop.has_top : has_top Prop := {
  def top : Prop := true
}

class instance Prop.has_bot : has_bot Prop := {
  def bot : Prop := false
}

class instance Prop.has_wedge : has_wedge Prop := {
  def wedge : Prop → Prop → Prop := and
}

class instance Prop.has_vee : has_vee Prop := {
  def vee : Prop → Prop → Prop := or
}

def not (φ : Prop) : Prop := φ → ⊥

class instance Prop.has_neg : has_neg Prop := {
  def neg : Prop → Prop := not
}

def iff (φ : Prop) (ψ : Prop) : Prop := (φ → ψ) ∧ (ψ → φ)
def uexists.{u} (P : u → Prop) : Prop := ∃ x, P x ∧ (∀ y, P y → x = y)
def ne.{u} (x : u) (y : u) : Prop := ¬x = y

def has_le.lt.{u} [has_le u] (x y : u) : Prop := x ≤ y ∧ x ≠ y
def has_le.ge.{u} [has_le u] (x y : u) : Prop := y ≤ x
def has_le.gt.{u} [has_le u] (x y : u) : Prop := y < x

-- Three axioms of topos (cf. [Introduction to CATEGORY THEORY and CATEGORICAL LOGIC, T. Streicher, '03])
axiom prop_ext (φ ψ : Prop) : (φ ↔ ψ) → φ = ψ
-- The fact that this axiom holds means every topos is always internally well-pointed.
axiom fun_ext.{u, v} (f₁ f₂ : u → v) : (∀ x, f₁ x = f₂ x) → f₁ = f₂
axiom auc.{u, v} (R : u → v → Prop) : (∀ x, ∃! y, R x y) → ∃! f, ∀ x, R x (f x)

lemma eq.transport.{u} (m₁ m₂ : u) (P : u → Prop) : m₁ = m₂ → P m₁ → P m₂ := eq.ind
lemma eq.symm.{u} (m₁ m₂ : u) : m₁ = m₂ → m₂ = m₁ := assume m₁ = m₂, eq.transport «m₁ = m₂» eq.refl
lemma eq.trans.{u} (m₁ m₂ m₃ : u) : m₁ = m₂ → m₂ = m₃ → m₁ = m₃ := assume m₁ = m₂, assume m₂ = m₃, eq.transport «m₂ = m₃» «m₁ = m₂»

lemma eq.ap.{u, v} (m₁ m₂ : u) (C : u → v) : m₁ = m₂ → C m₁ = C m₂ :=
assume m₁ = m₂,
eq.transport «m₁ = m₂» eq.refl

lemma eq.congr_fun.{u, v} (f₁ f₂ : u → v) (x : u) : f₁ = f₂ → f₁ x = f₂ x :=
eq.ap

lemma eq.congr_arg.{u, v} (f : u → v) (x₁ x₂ : u) : x₁ = x₂ → f x₁ = f x₂ :=
eq.ap

-- material adequacy
lemma ma (φ : Prop) : (⊤ = φ) → φ := assume ⊤ = φ, eq.transport «⊤ = φ» true.intro

-- modus ponens
lemma mp (φ ψ : Prop) : φ → (φ → ψ) → ψ := assume φ, assume φ → ψ, «φ → ψ» «φ»

lemma imp.trans (φ ψ ξ : Prop) : (φ → ψ) → (ψ → ξ) → φ → ξ := assume φ → ψ, assume ψ → ξ, assume φ, «ψ → ξ» («φ → ψ» «φ»)

lemma and.left (φ ψ : Prop) : φ ∧ ψ → φ :=
assume φ ∧ ψ,
and.ind «φ ∧ ψ» (assume φ, assume ψ, «φ»)

lemma and.right (φ ψ : Prop) : φ ∧ ψ → ψ :=
assume φ ∧ ψ,
and.ind «φ ∧ ψ» (assume φ, assume ψ, «ψ»)

lemma not.intro (φ : Prop) : (φ → ⊥) → ¬φ :=
assume φ → ⊥,
«φ → ⊥»

lemma not.elim (φ : Prop) : ¬φ → φ → ⊥ :=
assume ¬φ,
«¬φ»

-- modus tollens
lemma mt (φ ψ : Prop) : (φ → ψ) → ¬ψ → ¬φ := imp.trans

lemma contradiction (φ : Prop) : φ → ¬φ → ⊥ := mp

lemma absurd (φ : Prop) : ⊥ → φ := false.ind

lemma not.fixed_point_free (φ : Prop) : φ ≠ ¬φ :=
assume φ = ¬φ,
have ¬φ := assume φ, contradiction «φ» (eq.transport «φ = ¬φ» «φ»),
have φ := eq.transport (eq.symm «φ = ¬φ») «¬φ»,
contradiction «φ» «¬φ»

-- Internal version of nondegeneracy of topos.
-- Of course, this lemma holds in any (possibly degenerate) topos.
lemma true_ne_false : true ≠ false :=
assume true = false,
eq.transport «true = false» true.intro

-- law of non-contradiction
lemma nc (φ : Prop) : ¬(φ ∧ ¬φ) :=
assume φ ∧ ¬φ,
contradiction (and.left «φ ∧ ¬φ») (and.right «φ ∧ ¬φ»)

-- subsingleton
def unique.{u} (P : u → Prop) : Prop := ∀ (x₁ x₂ : u), P x₁ → P x₂ → x₁ = x₂

lemma uexists.intro.{u} (P : u → Prop) : exists P → unique P → uexists P :=
assume exists P,
assume unique P,
obtain (x : u), P x := «exists P»,
exists.intro (and.intro «P x» (take (y : u), assume P y, «unique P»[x, y] «P x» «P y»))

lemma uexists.exists.{u} (P : u → Prop) : uexists P → exists P :=
assume uexists P,
obtain (x : u), P x ∧ ∀ (y : u), P y → x = y := «uexists P»,
exists.intro (and.left «P x ∧ ∀ y, P y → x = y»)

lemma uexists.unique.{u} (P : u → Prop) : uexists P → unique P :=
assume uexists P,
take (x₁ : u),
take (x₂ : u),
assume P x₁,
assume P x₂,
obtain (x : u), P x ∧ ∀ y, P y → x = y := «uexists P»,
have ∀ y, P y → x = y := and.right «P x ∧ ∀ y, P y → x = y»,
have x = x₁ := «∀ y, P y → x = y»[x₁] «P x₁»,
have x = x₂ := «∀ y, P y → x = y»[x₂] «P x₂»,
eq.trans (eq.symm «x = x₁») «x = x₂»

lemma iff.intro (φ ψ : Prop) : (φ → ψ) → (ψ → φ) → (φ ↔ ψ) :=
assume φ → ψ,
assume ψ → φ,
and.intro «φ → ψ» «ψ → φ»

lemma iff.right (φ ψ : Prop) : (φ ↔ ψ) → φ → ψ :=
assume φ ↔ ψ,
and.left «φ ↔ ψ»

lemma iff.left (φ ψ : Prop) : (φ ↔ ψ) → ψ → φ :=
assume φ ↔ ψ,
and.right «φ ↔ ψ»

lemma iff.trans (φ ψ ξ : Prop) : (φ ↔ ψ) → (ψ ↔ ξ) → (φ ↔ ξ) :=
assume φ ↔ ψ,
assume ψ ↔ ξ,
iff.intro
  (imp.trans (iff.right «φ ↔ ψ») (iff.right «ψ ↔ ξ»))
  (imp.trans (iff.left «ψ ↔ ξ») (iff.left «φ ↔ ψ»))

lemma exists.map.{u} (P Q : u → Prop) : (∀ x, P x → Q x) → (∃ x, P x) → ∃ x, Q x :=
assume ∀ x, P x → Q x,
assume ∃ x, P x,
obtain (t : u), P t := «∃ x, P x»,
exists.intro («∀ x, P x → Q x»[t] «P t»)

lemma unique.map.{u} (P Q : u → Prop) : (∀ x, P x → Q x) → unique Q → unique P :=
assume ∀ x, P x → Q x,
assume unique Q,
take (x₁ : u),
take (x₂ : u),
assume P x₁,
assume P x₂,
(change ∀ x₁ x₂, Q x₁ → Q x₂ → x₁ = x₂, «unique Q»)[x₁, x₂] («∀ x, P x → Q x»[x₁] «P x₁») («∀ x, P x → Q x»[x₂] «P x₂»)

lemma uexists.congr.{u} (P Q : u → Prop) : (∀ x, P x ↔ Q x) → ((∃! x, P x) ↔ ∃! x, Q x) :=
assume ∀ x, P x ↔ Q x,
have ∀ x, P x → Q x := take (x : u), iff.right «∀ x, P x ↔ Q x»[x],
have ∀ x, Q x → P x := take (x : u), iff.left «∀ x, P x ↔ Q x»[x],
iff.intro
  (assume ∃! x, P x,
    uexists.intro
      (exists.map «∀ x, P x → Q x» (uexists.exists «∃! x, P x»))
      (unique.map «∀ x, Q x → P x» (uexists.unique «∃! x, P x»)))
  (assume ∃! x, Q x,
    uexists.intro
      (exists.map «∀ x, Q x → P x» (uexists.exists «∃! x, Q x»))
      (unique.map «∀ x, P x → Q x» (uexists.unique «∃! x, Q x»)))

-- The type of decidable propositions.
--
-- The structure command below is desugared into the following set of declarations.
--
--   type const bool : Type
--   const bool.rec.{α} : bool → (Prop → α) → α
--   def bool.rep : bool → Prop := λ (this : bool), bool.rec.{Prop} this (λ (rep : Prop), rep)
--   axiom bool.spec.{u} (this : bool) : bool.rep this = ⊤ ∨ bool.rep this = ⊥
--   axiom bool.abs.{u} (rep : Prop) : rep = ⊤ ∨ rep = ⊥ → ∃ this, rep = bool.rep this
--   axiom bool.ext.{u} (this₁ this₂ : bool) : bool.rep this₁ = bool.rep this₂ → this₁ = this₂
--
-- Of course, bool can be also defined in terms of an inductive type.
--
--   type inductive bool
--   | tt : bool
--   | ff : bool
--
-- We avoid this because we are in the bootstrapping process; existence of (all) inductive types
-- relies on the existence of an infinite type. By defining bool using structure it should be clear
-- that we don't need such an assumption.
--
structure bool := {
  const rep : Prop
  axiom spec : rep = ⊤ ∨ rep = ⊥
}

-- This command introduces:
--
--   def bool.tt.rep : Prop := ⊤
--   lemma bool.tt.spec : bool.tt.rep = ⊤ ∨ bool.tt.rep = ⊥ := tt_spec
--   const bool.tt : bool
--   axiom bool.tt.spec.{α} : bool.rec bool.tt = λ (f : Prop → α), f bool.tt.rep
--
instance bool.tt : bool := {
  def rep : Prop := ⊤
  lemma spec : rep = ⊤ ∨ rep = ⊥ := or.left eq.refl
}

instance bool.ff : bool := {
  def rep : Prop := ⊥
  lemma spec : rep = ⊤ ∨ rep = ⊥ := or.right eq.refl
}

def tt : bool := bool.tt
def ff : bool := bool.ff

lemma bool.rep_tt_eq_true : bool.rep tt = ⊤ :=
calc bool.rep tt = bool.rec tt (λ rep, rep)          := eq.refl
             ... = (λ f, f bool.tt.rep) (λ rep, rep) := eq.ap bool.tt.spec
             ... = ⊤                                 := eq.refl,
«bool.rep tt = ⊤»

lemma bool.rep_ff_eq_false : bool.rep ff = ⊥ :=
calc bool.rep ff = bool.rec ff (λ rep, rep)          := eq.refl
             ... = (λ f, f bool.ff.rep) (λ rep, rep) := eq.ap bool.ff.spec
             ... = ⊥                                 := eq.refl,
«bool.rep ff = ⊥»

lemma bool.eq_tt (b : bool) : bool.rep b = ⊤ → b = tt :=
assume bool.rep b = ⊤,
calc bool.rep b = ⊤           := «bool.rep b = ⊤»
            ... = bool.rep tt := eq.symm bool.rep_tt_eq_true,
bool.ext «bool.rep b = bool.rep tt»

lemma bool.eq_ff (b : bool) : bool.rep b = ⊥ → b = ff :=
assume bool.rep b = ⊥,
calc bool.rep b = ⊥           := «bool.rep b = ⊥»
            ... = bool.rep ff := eq.symm bool.rep_ff_eq_false,
bool.ext «bool.rep b = bool.rep ff»

lemma bool.case (b : bool) : b = tt ∨ b = ff :=
or.ind bool.spec
  (assume bool.rep b = ⊤,
   or.left (bool.eq_tt «bool.rep b = ⊤»))
  (assume bool.rep b = ⊥,
   or.right (bool.eq_ff «bool.rep b = ⊥»))

lemma bool.tt_ne_ff : tt ≠ ff :=
assume tt = ff,
calc ⊤ = bool.rep tt := eq.symm bool.rep_tt_eq_true
   ... = bool.rep ff := eq.ap «tt = ff»
   ... = ⊥           := bool.rep_ff_eq_false,
contradiction «⊤ = ⊥» true_ne_false

/-
 - Extensionality
 -/

lemma eq.congr_abs.{u, v} (m₁ m₂ : u) : (∀ (x : v), m₁ = m₂) → (λ (x : v), m₁) = (λ (x : v), m₂) :=
assume ∀ (x : v), m₁ = m₂,
fun_ext «∀ (x : v), m₁ = m₂»

lemma eta_expand.{u, v} (f : u → v) : f = λ x, f x :=
-- FIXME: the unifier is unable to synthesize `f` (for some reasons).
@fun_ext[f, _] (take (x : u), eq.refl)

/-
 - functions
 -/

def injective.{u, v} (f : u → v) : Prop := ∀ x y, f x = f y → x = y
def surjective.{u, v} (f : u → v) : Prop := ∀ y, ∃ x, y = f x

lemma lawvere_fixpoint.{u, v} (f : v → v) : (∃ (e : u → u → v), surjective e) → ∃ y, y = f y :=
assume ∃ (e : u → u → v), surjective e,
obtain (e : u → u → v), surjective e := «∃ (e : u → u → v), surjective e»,
obtain (x : u), (λ x, f (e x x)) = e x := «surjective e»[λ x, f (e x x)],
have f (e x x) = e x x := eq.congr_fun «(λ x, f (e x x)) = e x»,
exists.intro (eq.symm «f (e x x) = e x x»)

lemma injective.unique.{u, v} (f : u → v) (y : v) : injective f → unique (λ x, y = f x) :=
assume injective f,
take (x₁ : u),
take (x₂ : u),
assume y = f x₁,
assume y = f x₂,
(change ∀ x y, f x = f y → x = y, «injective f»)[x₁, x₂] (eq.trans (eq.symm «y = f x₁») «y = f x₂»)

def split.{u, v} (f : u → v) : Prop := ∃ g, ∀ y, y = f (g y)

/-
 - subsets
 -/

infix ∈ : 50 := in
infix ∉ : 50 := notin
infix ⊆ : 50 := subset
infixl ∩ : 70 := cap
infixl ∪ : 65 := cup
infix ∖ : 70 := setminus
nofix ∅ := empty

-- TODO: type sub u := u → Prop

def in.{u} (x : u) (s : sub u) : Prop := s x
def notin.{u} (x : u) (s : sub u) : Prop := ¬(x ∈ s)
def univ.{u} : sub u := λ x, ⊤
def empty.{u} : sub u := λ x, ⊥
def subset.{u} (s : sub u) (t : sub u) : Prop := ∀ x, x ∈ s → x ∈ t
def sep.{u} (s : sub u) (φ : u → Prop) : sub u := λ x, x ∈ s ∧ φ x
def cap.{u} (s : sub u) (t : sub u) : sub u := { x | x ∈ s ∧ x ∈ t }
def cup.{u} (s : sub u) (t : sub u) : sub u := { x | x ∈ s ∨ x ∈ t }
def Cap.{u} (a : sub (sub u)) : sub u := { x | ∀ s, s ∈ a → x ∈ s }
def Cup.{u} (a : sub (sub u)) : sub u := { x | ∃ s, s ∈ a ∧ x ∈ s }
def power.{u} (s : sub u) : sub (sub u) := { t | t ⊆ s }
def setminus.{u} (s : sub u) (t : sub u) : sub u := { x | x ∈ s ∧ x ∉ t }
def im.{u, v} (f : u → v) (s : sub u) : sub v := { y | ∃ x, x ∈ s ∧ y = f x }
def insert.{u} (a : u) (s : sub u) : sub u := { x | x = a ∨ x ∈ s }

-- Consolas does not display well the cap and bigcap symbols:
--
--    ∩  U+2229 INTERSECTION
--    ⋂  U+22C2 N-ARY INTERSECTION
--
-- that's why we use instead ⋒ U+22D2 DOUBLE INTERSECTION.
-- In Lean, two character symbols ⋂₀ and ⋃₀ are adopted but I could not find their origin on the internet.
-- https://github.com/leanprover/lean3/pull/936/commits/549feb5d7f95c0d28450b3778d471becafe58046
prefix ⋒ : 110 := Cap
prefix ⋓ : 110 := Cup

lemma cantor.{u} : ¬(∃ (e : u → sub u), surjective e) :=
mt lawvere_fixpoint (
  assume ∃ φ, φ = ¬φ,
  obtain (φ : Prop), φ = ¬φ := «∃ φ, φ = ¬φ»,
  contradiction «φ = ¬φ» not.fixed_point_free)

def preimage.{u, v} (f : u → v) (t : sub v) : sub u := { x | t (f x) }

inductive fin.{u} : sub u → Prop
| empty : fin empty
| insert (a : u) (s : sub u) : fin s → fin (insert a s)

/-
 - choice
 -/

-- The type of inhabited subsets.
structure inhab u := {
  const rep : sub u
  axiom inhabited : ∃ x, x ∈ rep
}

lemma inhab.uabs.{u} (s : sub u) : (∃ x, x ∈ s) → ∃! c, s = inhab.rep c :=
assume ∃ x, x ∈ s,
obtain (c : inhab u), s = inhab.rep c := inhab.abs «∃ x, x ∈ s»,
uexists.intro
  (exists.intro «s = inhab.rep c»)
  (take (c₁ : inhab u),
   take (c₂ : inhab u),
   assume s = inhab.rep c₁,
   assume s = inhab.rep c₂,
   have inhab.rep c₁ = inhab.rep c₂ := eq.trans (eq.symm «s = inhab.rep c₁») «s = inhab.rep c₂»,
   inhab.ext «inhab.rep c₁ = inhab.rep c₂»)

-- The existence of the constant and the axiom state that every type u is a choice type.
const choice.{u} : inhab u → u
axiom choice.spec.{u} (x : inhab u) : choice x ∈ inhab.rep x

lemma ac.{u, v} (R : u → v → Prop) : (∀ x, ∃ y, R x y) → ∃ f, ∀ x, R x (f x) :=
assume ∀ x, ∃ y, R x y,
have ∀ x, ∃! (h : inhab v), R x = inhab.rep h :=
  take (x : u),
  -- FIXME: the unifier could not synthesize `R x`. Perhaps because it's a partially applied term?
  @inhab.uabs[R x] «∀ x, ∃ y, R x y»[x],
have ∃! (f : u → inhab v), ∀ x, R x = inhab.rep (f x) :=
  auc «∀ x, ∃! (h : inhab v), R x = inhab.rep h»,
obtain (f : u → inhab v), ∀ x, R x = inhab.rep (f x) :=
  uexists.exists «∃! (f : u → inhab v), ∀ x, R x = inhab.rep (f x)»,
exists.intro
  (take (x : u),
   have inhab.rep (f x) (choice (f x)) :=
     choice.spec,
   eq.transport (eq.symm (eq.congr_fun «∀ x, R x = inhab.rep (f x)»[x])) «inhab.rep (f x) (choice (f x))»)

lemma surjective.split.{u, v} (f : u → v) : surjective f → split f :=
ac

-- Diaconescu's argument: ac + prop_ext + fun_ext → em
--
-- The bool type having a choice function is in fact equivalent to em.
-- While em implies (using prop_ext) Prop is _internally two-valued_ i.e.
-- ∀ φ, φ = ⊤ ∨ φ = ⊥, the ambient topos may not be (externally) two-valued;
-- it only implies the topos is boolean.
lemma em (φ : Prop) : φ ∨ ¬φ :=
have ∃ b, φ ∨ b = tt := exists.intro (or.right eq.refl),
have ∃ b, φ ∨ b = ff := exists.intro (or.right eq.refl),
obtain (h₁ : inhab bool), (λ b, φ ∨ b = tt) = inhab.rep h₁ := inhab.abs «∃ b, φ ∨ b = tt»,
obtain (h₂ : inhab bool), (λ b, φ ∨ b = ff) = inhab.rep h₂ := inhab.abs «∃ b, φ ∨ b = ff»,
have φ → choice h₁ = choice h₂ :=
  assume φ,
  have (λ b, φ ∨ b = tt) = (λ b, φ ∨ b = ff) := fun_ext (
    take (b : bool),
    have φ ∨ b = tt := or.left «φ»,
    have φ ∨ b = ff := or.left «φ»,
    prop_ext (iff.intro (assume φ ∨ b = tt, «φ ∨ b = ff») (assume φ ∨ b = ff, «φ ∨ b = tt»))
  ),
  have inhab.rep h₁ = inhab.rep h₂ :=
    eq.trans (eq.symm «(λ b, φ ∨ b = tt) = inhab.rep h₁») (eq.trans «(λ b, φ ∨ b = tt) = (λ b, φ ∨ b = ff)» «(λ b, φ ∨ b = ff) = inhab.rep h₂»),
  have h₁ = h₂ :=
    inhab.ext «inhab.rep h₁ = inhab.rep h₂»,
  eq.congr_arg «h₁ = h₂»,
have φ ∨ choice h₁ = tt :=
  eq.transport (eq.symm (eq.congr_fun «(λ b, φ ∨ b = tt) = inhab.rep h₁»)) choice.spec,
have φ ∨ choice h₂ = ff :=
  eq.transport (eq.symm (eq.congr_fun «(λ b, φ ∨ b = ff) = inhab.rep h₂»)) choice.spec,
have φ ∨ choice h₁ ≠ choice h₂ :=
  or.ind «φ ∨ choice h₁ = tt»
    (assume φ, or.left «φ»)
    (assume choice h₁ = tt,
      or.ind «φ ∨ choice h₂ = ff»
        (assume φ, or.left «φ»)
        (assume choice h₂ = ff,
          or.right (eq.transport (eq.symm «choice h₂ = ff») (eq.transport (eq.symm «choice h₁ = tt») bool.tt_ne_ff)))),
or.ind «φ ∨ choice h₁ ≠ choice h₂»
  (assume φ,
    or.left «φ»)
  (assume choice h₁ ≠ choice h₂,
    or.right (mt «φ → choice h₁ = choice h₂» «choice h₁ ≠ choice h₂»))

-- double negation elimination
lemma dne (φ : Prop) : ¬¬φ → φ :=
assume ¬¬φ,
or.ind em
  (assume φ,
   «φ»)
  (assume ¬φ,
   absurd (contradiction «¬φ» «¬¬φ»))

lemma peirce (φ ψ : Prop) : ((φ → ψ) → φ) → φ :=
or.ind em
  (assume φ,
   assume (φ → ψ) → φ,
   «φ»)
  (assume ¬φ,
   assume (φ → ψ) → φ,
   have φ → ψ := assume φ, absurd (contradiction «φ» «¬φ»),
   «(φ → ψ) → φ» «φ → ψ»)

lemma imp.to_or (φ ψ : Prop) : (φ → ψ) → ¬φ ∨ ψ :=
assume φ → ψ,
or.ind em
  (assume φ,
   have ψ := «φ → ψ» «φ»,
   or.right «ψ»)
  (assume ¬φ,
   or.left «¬φ»)

lemma or.to_imp (φ ψ : Prop) : ¬φ ∨ ψ → φ → ψ :=
assume ¬φ ∨ ψ,
assume φ,
or.ind «¬φ ∨ ψ»
  (assume ¬φ,
   absurd (contradiction «φ» «¬φ»))
  (assume ψ,
   «ψ»)

-- An intermediate axiom. This is strictly weaker than em.
lemma godel_dummet (φ ψ : Prop) : (φ → ψ) ∨ (ψ → φ) :=
or.ind em
  (assume φ,
   have ¬ψ ∨ φ := or.right «φ»,
   or.right (or.to_imp «¬ψ ∨ φ»))
  (assume ¬φ,
   have ¬φ ∨ ψ := or.left «¬φ»,
   or.left (or.to_imp «¬φ ∨ ψ»))

-- equivalent to the Gödel-Dummet axiom
lemma imp.right_distr_or (φ ψ ξ : Prop) : (φ → ψ ∨ ξ) → (φ → ψ) ∨ (φ → ξ) :=
assume φ → ψ ∨ ξ,
or.ind godel_dummet
  (assume ψ → ξ,
   have φ → ξ :=
     assume φ,
     have ψ ∨ ξ := «φ → ψ ∨ ξ» «φ»,
     or.ind «ψ ∨ ξ»
       (assume ψ,
        «ψ → ξ» «ψ»)
       (assume ξ,
        «ξ»),
   or.right «φ → ξ»)
  (assume ξ → ψ,
   have φ → ψ :=
     assume φ,
     have ψ ∨ ξ := «φ → ψ ∨ ξ» «φ»,
     or.ind «ψ ∨ ξ»
       (assume ψ,
        «ψ»)
       (assume ξ,
        «ξ → ψ» «ξ»),
   or.left «φ → ψ»)

-- generalized excluded middle. This is equivalent to em in the presence of ex falso.
lemma gem (φ ψ : Prop) : φ ∨ (φ → ψ) :=
or.ind em
  (assume φ,
   or.left «φ»)
  (assume ¬φ,
   have φ → ψ :=
     assume φ,
     absurd (contradiction «φ» «¬φ»),
   or.right «φ → ψ»)

-- A type operator sending an inhabited type to its propositional truncation.
-- This type has several names in the literature, such as support type, bracket type, or propositional truncation.
structure is_inhabited u := {
  axiom inhabited : ∃ (a : u), ⊤
}

-- (The dual of) the drinker paradox. This is equivalent to independence_of_premise.
lemma strong_indefinite_description.{u} (h : is_inhabited u) (P : u → Prop) : ∃ x, (∃ y, P y) → P x :=
or.ind @em[∃ y, P y]
  (assume ∃ y, P y,
   obtain (y : u), P y := «∃ y, P y»,
   @exists.intro[_, y]
     (assume ∃ y, P y,
      «P y»))
  (assume ¬∃ y, P y,
   obtain (x : u), ⊤ := @is_inhabited.inhabited[h],
   @exists.intro[_, x]
    (assume ∃ y, P y,
     @absurd[P x] (contradiction «∃ y, P y» «¬∃ y, P y»)))

-- Independence of (general) premise. This is equivalent to the drinker paradox.
lemma independence_of_premise.{u} (h : is_inhabited u) (P : u → Prop) (φ : Prop) : (φ → ∃ x, P x) → (∃ x, φ → P x) :=
assume φ → ∃ x, P x,
obtain (x : u), (∃ y, P y) → P x := @strong_indefinite_description[h, P],
have φ → P x := imp.trans «φ → ∃ x, P x» «(∃ y, P y) → P x»,
exists.intro «φ → P x»

/-
 - epsilon
 -/

-- internal global choice operator
-- 
-- Introducing this constant restricts the class of models to toposes whose supports split.
-- Postulating split supports together with the internal axiom of choice, our logic becomes
-- precisely an internal logic of toposes satisfying the _external_ axiom of choice.
--
--    internal axiom of choice + split supports = external axiom of choice
--
-- Note we do not have an object-level function assigning for each type u the choice function,
-- which is strictly stronger than our choice and would imply the axiom of choice.
-- For the details of this direction see Lean's standard library.
--
-- In the presence of dependent products, this operator corresponds to the law of double negation:
--
--   is_inhabited u ≅ Π (p : Prop), (u → El(p)) → El(p)
--
-- where we assume Prop is a Tarski universe.
--
-- One can interpret this function in Kripke-Joyal semantics as follows:
-- whenever one proves ⊢ ∃ (x : u), ⊤, hence ⊩ ∃ (x : u), ⊤, which in general
-- means there exist an object V, V → 1 epi and V → u, one can safely assume V was 1.
--
-- Assuming IAC, the following are equivalent. E is a topos.
-- (a) Supports split in E.
-- (b) Supports split in E/X for each X ∈ E.
--
-- Proof:
--   For (a) => (b), take any object f ∈ E/X, where f : A → X in E.
--   f has a split support iff there exists a morphism from supp f to f.
--   We want to construct such a morphism.
--   supp f in E/X is given by the inclusion i : im f → X in E.
--   By external AC (which follows from IAC + SS) of C, we have a section
--   s : im f → A of an epi q : A → im f.
--   Since f s = i q s = i = supp f, s is a morphism in E/X from supp f to f.
-- QED.
--
-- This lemma is very important because the fact the properties of the ambient category are
-- inherited to its slices corresponds to that introducing a variable does not change the logic.
-- If we add locally defined types in the future, this lemma justifies the use of epsilon applying to
-- such types that may contain free (term) variables.
const epsilon.{u} : is_inhabited u → u

structure pointed u := {
  const pt : u
}

instance pointed.mk.{u} (x : u) : pointed u := {
  def pt : u := x
}

-- Essentially same as epsilon, but is more structured.
def is_inhabited.pointed.{u} (h : is_inhabited u) : pointed u := pointed.mk (epsilon h)

-- Construct external epsilon operator from internal epsilon and internal axiom of choice.
-- A similar construction is found in arXiv:1603.00822.

lemma some_exists.{u} (h : is_inhabited u) : ∃ (ε : (u → Prop) → u), ∀ P, (∃ y, P y) → P (ε P) :=
ac @strong_indefinite_description[h]

-- The followings are boilerplate. To obtain an object `x` from a proposition `∃ x, ...`, we first define a structure and then
-- prove its inhabitedness and finally get the term applying the internal epsilon.
structure Some u := {
  const run : (u → Prop) → u
  axiom spec (P : u → Prop) : (∃ y, P y) → P (run P)
}

instance Some.is_inhabited.{u} (h : is_inhabited u) : is_inhabited (Some u) := {
  lemma inhabited : ∃ (x : Some u), ⊤ :=
  obtain (ε : (u → Prop) → u), ∀ P, (∃ y, P y) → P (ε P) := @some_exists[h],
  obtain (this : Some u), ε = Some.run this := @Some.abs[ε] «∀ P, (∃ y, P y) → P (ε P)»,
  @exists.intro[_, this] true.intro
}

def Some.pt.{u} (h : is_inhabited u) : Some u := pointed.pt (is_inhabited.pointed (Some.is_inhabited h))

-- This is what we wanted, the Hilbert epsilon.
def some.{u} [has (is_inhabited u)] : (u → Prop) → u := Some.run (Some.pt summon)
lemma some.spec.{u} [has (is_inhabited u)] (P : u → Prop) : (∃ y, P y) → P (some P) := @Some.spec[Some.pt summon, P]

/-  
 - natural numbers
 -/

-- The following declarations are introduced.
--
-- type const nat : Type
-- const nat.zero : nat
-- const nat.succ : nat → nat
-- axiom nat.ind : ∀ x, ∀ P, P nat.zero → (∀ n, P n → P (nat.succ n)) → P x
-- const nat.rec.{u} : nat → u → (nat → u → u) → u
-- axiom nat.zero.spec.{u} : nat.rec nat.zero = (λ x f, x)
-- axiom nat.succ.spec.{u} : ∀ n, nat.rec (nat.succ n) = λ x f, f n (nat.rec n x f)
--
-- Note that iota equations (rules in the form of `rec (ctor ..) = ..`) only hold propositionally in our system.
-- This is not a theoretical limination but to reduce the search space the higher-order unifier runs on.
-- If this limitation is too restrictive, please report us.
type inductive nat
| zero : nat
| succ : nat → nat

-- TODO: type ℕ := nat

def zero : nat := nat.zero
def succ : nat → nat := nat.succ

def nat.add (n m : ℕ) : ℕ := nat.rec n m (λ p, succ)
def nat.mul (n m : ℕ) : ℕ := nat.rec n zero (λ p, nat.add m)

class instance nat.has_plus : has_plus ℕ := {
  def plus : ℕ → ℕ → ℕ := nat.add
}

class instance nat.has_ast : has_ast ℕ := {
  def ast : ℕ → ℕ → ℕ := nat.mul
}

def bit0 (n : ℕ) : ℕ := n + n
def bit1 (n : ℕ) : ℕ := succ (bit0 n)

/-
 - basic inductive types
 -/

-- TODO
-- one may write like
--
--  type inductive prod (u v : Type) : Type
--  | pair (fst : u) (snd : v) : prod
--
type inductive prod u v
| pair : u → v → prod

type inductive unit
| star : unit

type inductive sum u v
| inl : u → sum
| inr : v → sum

type inductive empty

type inductive list u
| nil : list
| cons : u → list → list

type inductive option u
| none : option
| some : u → option

type inductive ord
| zero : ord
| succ : ord → ord
| limit : (nat → ord) → ord

type inductive bin_tree u
| empty : bin_tree
| leaf : u → bin_tree
| node : bin_tree → bin_tree → bin_tree

-- type infixr × : 35

def prod.fst.{u, v} (p : u × v) : u := prod.rec p (λ a b, a)
def prod.snd.{u, v} (p : u × v) : v := prod.rec p (λ a b, b)

local type const u v

-- TODO: use namespace
def fst : u × v → u := prod.fst
def snd : u × v → v := prod.snd
def pair.{u, v} : u → v → u × v := prod.pair
def star : unit := unit.star
def inl : u → sum u v := sum.inl
def inr : v → sum u v := sum.inr
def nil : list u := list.nil
def cons : u → list u → list u := list.cons
def none : option u := option.none
-- def some : u → option u := option.some

lemma unit.eta_expand (x : unit) : x = star :=
unit.ind eq.refl

lemma unit.eta_reduce (x : unit) : star = x :=
eq.symm unit.eta_expand

lemma unit_ext (x₁ x₂ : unit) : x₁ = x₂ :=
eq.trans unit.eta_expand unit.eta_reduce

lemma prod.fst.pair.{u, v} (x : u) (y : v) : fst (pair x y) = x :=
eq.congr_fun prod.pair.spec

lemma prod.snd.pair.{u, v} (x : u) (y : v) : snd (pair x y) = y :=
eq.congr_fun prod.pair.spec

/- FIXME
lemma prod_ext.{u, v} (p₁ p₂ : u × v) : fst p₁ = fst p₂ → snd p₁ = snd p₂ → p₁ = p₂ :=
prod.ind
  take (a₁ : u), take (b₁ : v),
  prod.ind
  take (a₂ : u), take (b₂ : v),
    assume fst ⟨a₁, b₁⟩ = fst ⟨a₂, b₂⟩,
    assume snd ⟨a₁, b₁⟩ = snd ⟨a₂, b₂⟩,
    have a₁ = a₂ :=
      have a₁ = fst ⟨a₁, b₁⟩ := eq.refl,
      have fst ⟨a₂, b₂⟩ = a₂ := eq.refl,
      eq.trans «a₁ = fst ⟨a₁, b₁⟩» (eq.trans «fst ⟨a₁, b₁⟩ = fst ⟨a₂, b₂⟩» «fst ⟨a₂, b₂⟩ = a₂»),
    have b₁ = b₂ :=
      have b₁ = snd ⟨a₁, b₁⟩ := eq.refl,
      have snd ⟨a₂, b₂⟩ = b₂ := eq.refl,
      eq.trans «b₁ = snd ⟨a₁, b₁⟩» (eq.trans «snd ⟨a₁, b₁⟩ = snd ⟨a₂, b₂⟩» «snd ⟨a₂, b₂⟩ = b₂»),
    have ⟨a₁, b₁⟩ = ⟨a₂, b₁⟩ := eq.ap «a₁ = a₂»,
    have ⟨a₂, b₁⟩ = ⟨a₂, b₂⟩ := eq.ap «b₁ = b₂»,
    eq.trans «⟨a₁, b₁⟩ = ⟨a₂, b₁⟩» «⟨a₂, b₁⟩ = ⟨a₂, b₂⟩»

lemma prod.eta.{u, v} (p : prod u v) : p = pair (fst p) (snd p) :=
prod_ext eq.refl eq.refl
-/

/-
 - well-founded
 -/

-- acc R x :↔ x is in the well-founded part of R
inductive acc.{u} (R : u → u → Prop) : u → Prop
| intro (x : u) : (∀ y, R y x → acc y) → acc x

def well_founded.{u} (R : u → u → Prop) : Prop := ∀ x, acc R x

/-
 - (some) algebras
 -/

structure monoid u := {
  const mult : u → u → u
  const unit : u
  axiom assoc (x₁ x₂ x₃ : u) : mult (mult x₁ x₂) x₃ = mult x₁ (mult x₂ x₃)
  axiom left_unit (x : u) : mult unit x = x
  axiom right_unit (x : u) : mult x unit = x
}

def mult.{u} : monoid u → u → u → u := monoid.mult
def unit.{u} : monoid u → u := monoid.unit

def interchange.{u} (m₁ m₂ : monoid u) : Prop := ∀ a b c d, mult m₁ (mult m₂ a b) (mult m₂ c d) = mult m₂ (mult m₁ a c) (mult m₁ b d)

lemma interchange.equates_unit.{u} (m₁ m₂ : monoid u) : interchange m₁ m₂ → unit m₁ = unit m₂ :=
assume interchange m₁ m₂,
calc unit m₁ = mult m₁ (unit m₁) (unit m₁)                                         := eq.symm monoid.left_unit
         ... = mult m₁ (mult m₂ (unit m₂) (unit m₁)) (unit m₁)                     := eq.ap (eq.symm monoid.left_unit)
         ... = mult m₁ (mult m₂ (unit m₂) (unit m₁)) (mult m₂ (unit m₁) (unit m₂)) := eq.ap (eq.symm monoid.right_unit)
         ... = mult m₂ (mult m₁ (unit m₂) (unit m₁)) (mult m₁ (unit m₁) (unit m₂)) := «interchange m₁ m₂»[_, _, _, _]
         ... = mult m₂ (unit m₂) (mult m₁ (unit m₁) (unit m₂))                     := eq.ap monoid.right_unit
         ... = mult m₂ (unit m₂) (unit m₂)                                         := eq.ap monoid.left_unit
         ... = unit m₂                                                             := eq.ap monoid.right_unit,
«unit m₁ = unit m₂»

lemma interchange.equates_mult.{u} (m₁ m₂ : monoid u) : interchange m₁ m₂ → mult m₁ = mult m₂ :=
assume interchange m₁ m₂,
have ∀ a b, mult m₁ a b = mult m₂ a b :=
  take (a : u),
  take (b : u),
  calc mult m₁ a b = mult m₁ (mult m₂ a (unit m₂)) b                     := eq.ap (eq.symm monoid.right_unit)
               ... = mult m₁ (mult m₂ a (unit m₂)) (mult m₂ (unit m₂) b) := eq.ap (eq.symm monoid.left_unit)
               ... = mult m₂ (mult m₁ a (unit m₂)) (mult m₁ (unit m₂) b) := «interchange m₁ m₂»[_, _, _, _]
               ... = mult m₂ (mult m₁ a (unit m₁)) (mult m₁ (unit m₂) b) := eq.ap (eq.symm (interchange.equates_unit «interchange m₁ m₂»))
               ... = mult m₂ (mult m₁ a (unit m₁)) (mult m₁ (unit m₁) b) := eq.ap (eq.symm (interchange.equates_unit «interchange m₁ m₂»))
               ... = mult m₂ a (mult m₁ (unit m₁) b)                     := eq.ap monoid.right_unit
               ... = mult m₂ a b                                         := eq.ap monoid.left_unit,
  «mult m₁ a b = mult m₂ a b»,
-- FIXME: remove @ from fun_ext after the bug in the unifier is fixed.
@fun_ext[mult m₁, mult m₂] (take (a : u), @fun_ext[mult m₁ a, mult m₂ a] «∀ a b, mult m₁ a b = mult m₂ a b»[a])

lemma eckmann_hilton.{u} (m₁ m₂ : monoid u) : interchange m₁ m₂ → m₁ = m₂ :=
assume interchange m₁ m₂,
monoid.ext (interchange.equates_mult «interchange m₁ m₂») (interchange.equates_unit «interchange m₁ m₂»)

/-
structure monoid.hom u v [has (monoid u)] [has (monoid v)] := {
  const f : u → v
  axiom homomorphic (x₁ x₂ : u) : mult (f x₁) (f x₂) = f (mult x₁ x₂)
}
-/

structure is_prop u := {
  axiom spec (x₁ x₂ : u) : x₁ = x₂
}

inductive topology.{u} (subbase : sub (sub u)) : sub (sub u)
| subbase (x : sub u) : x ∈ subbase → topology x
| univ : topology univ
| inter (x y : sub u) : topology (x ∩ y)
| union (A : sub (sub u)) : (∀ a, a ∈ A → topology a) → topology (Cup A)

structure space u := {
  const subbase : sub (sub u)
}

instance space.mk.{u} (subbase : sub (sub u)) : space u := {
  def subbase : sub (sub u) := subbase
}

-- うごいた
lemma not_not_em_1 (φ : Prop) : ¬(φ ∨ ¬φ) → ¬φ :=
assume ¬(φ ∨ ¬φ),
assume φ,
contradiction (or.left «φ») «¬(φ ∨ ¬φ)»

-- うごいた
lemma not_not_em (φ : Prop) : ¬¬(φ ∨ ¬φ) :=
assume ¬(φ ∨ ¬φ),
have ¬φ := not_not_em_1 «¬(φ ∨ ¬φ)»,
contradiction (or.right «¬φ») «¬(φ ∨ ¬φ)»

structure complete_lattice u := {
  const Meet : sub u → u
  const Join : sub u → u
}

def complete_lattice.meet.{u} (L : complete_lattice u) (x y : u) : u :=
complete_lattice.Meet L (λ z, z = x ∨ z = y)

def complete_lattice.join.{u} (L : complete_lattice u) (x y : u) : u :=
complete_lattice.Join L (λ z, z = x ∨ z = y)

def complete_lattice.top.{u} (L : complete_lattice u) : u :=
complete_lattice.Meet L ∅

def complete_lattice.bot.{u} (L : complete_lattice u) : u :=
complete_lattice.Join L ∅

def complete_lattice.le.{u} (L : complete_lattice u) (x y : u) : Prop :=
x = complete_lattice.meet L x y

class instance complete_lattice.has_vee.{u} [has (complete_lattice u)] : has_vee u := {
  def vee : u → u → u := complete_lattice.meet summon
}

class instance complete_lattice.has_wedge.{u} [has (complete_lattice u)] : has_wedge u := {
  def wedge : u → u → u := complete_lattice.meet summon
}

class instance complete_lattice.has_top.{u} [has (complete_lattice u)] : has_top u := {
  def top : u := complete_lattice.top summon
}

class instance complete_lattice.has_bot.{u} [has (complete_lattice u)] : has_bot u := {
  def bot : u := complete_lattice.bot summon
}

class instance complete_lattice.has_le.{u} [has (complete_lattice u)] : has_le u := {
  def le : u → u → Prop := complete_lattice.le summon
}

-- TODO: add notations
def Meet.{u} [has (complete_lattice u)] : sub u → u := complete_lattice.Meet summon
def Join.{u} [has (complete_lattice u)] : sub u → u := complete_lattice.Join summon

def monotone.{u, v} [has_le u] [has_le v] (f : u → v) : Prop := ∀ x y, x ≤ y → f x ≤ f y

def lfp.{u} [has (complete_lattice u)] (f : u → u) : u := Meet { x | f x ≤ x }
def gfp.{u} [has (complete_lattice u)] (f : u → u) : u := Join { x | x ≤ f x }
